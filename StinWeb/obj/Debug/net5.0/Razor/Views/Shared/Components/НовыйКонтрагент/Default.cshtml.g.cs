#pragma checksum "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\Shared\Components\НовыйКонтрагент\Default.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c092d65ef0ddb63602633ea88a1d70cc55c4a2f4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_Components_НовыйКонтрагент_Default), @"mvc.1.0.view", @"/Views/Shared/Components/НовыйКонтрагент/Default.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\_ViewImports.cshtml"
using StinWeb;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Grid;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\_ViewImports.cshtml"
using NonFactors.Mvc.Lookup;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\_ViewImports.cshtml"
using StinWeb.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c092d65ef0ddb63602633ea88a1d70cc55c4a2f4", @"/Views/Shared/Components/НовыйКонтрагент/Default.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"303b915066d1efa5c78241ff8833664880cca93b", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_Components_НовыйКонтрагент_Default : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("ОшибкиНовогоКонтрагента"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("validation float-right text-danger"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"
<div class=""modal fade"" id=""новыйКонтрагент"" tabindex=""-1"" role=""dialog"" aria-labelledby=""вводНовогоКонтрагента"" aria-hidden=""true"">
    <div class=""modal-dialog modal-dialog-centered"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""вводНовогоКонтрагента"">Новый контрагент</h5>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("div", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c092d65ef0ddb63602633ea88a1d70cc55c4a2f44719", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
#nullable restore
#line 7 "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\Shared\Components\НовыйКонтрагент\Default.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper.ValidationSummary = global::Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All;

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-summary", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper.ValidationSummary, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                ");
#nullable restore
#line 13 "C:\Users\Валентин\source\repos\StinWeb\StinWeb\Views\Shared\Components\НовыйКонтрагент\Default.cshtml"
           Write(Html.Hidden("контрагентlookupId","", new { id = "контрагентlookupId" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                <div>
                    <label>
                        <input type=""radio"" name=""ВидКонтрагента"" id=""видКонтрагента"" value=""1"" checked=""checked"" aria-label=""видКонтрагента"" aria-describedby=""radio-видКонтрагента"">
                        Физическое лицо
                    </label>
                </div>
                <div>
                    <label>
                        <input type=""radio"" name=""ВидКонтрагента"" id=""видКонтрагента"" value=""2"" aria-label=""видКонтрагента"" aria-describedby=""radio-видКонтрагента"">
                        Юридическое лицо
                    </label>
                </div>
                <div class=""input-group input-group-sm mb-3"">
                    <div class=""input-group-prepend"">
                        <span class=""input-group-text"">Наименование</span>
                    </div>
                    <input id=""контрагентНаименование"" name=""КонтрагентНаименование"" type=""text"" class=""form-control"" aria-label=""контрагентНаименование"" a");
            WriteLiteral(@"ria-describedby=""inputконтрагентНаименование"">
                </div>
                <div class=""row mb-3 collapse"" id=""инн"">
                    <div class=""input-group input-group-sm col-6"">
                        <div class=""input-group-prepend"">
                            <span class=""input-group-text"">ИНН</span>
                        </div>
                        <input id=""контрагентИНН"" name=""КонтрагентИНН"" type=""text"" class=""form-control"" data-inputmask=""'mask': '9999999999[99]'"" aria-label=""контрагентИНН"" aria-describedby=""inputконтрагентИНН"">
                    </div>
                    <div class=""input-group input-group-sm col-6"">
                        <div class=""input-group-prepend"">
                            <span class=""input-group-text"">КПП</span>
                        </div>
                        <input id=""контрагентКПП"" name=""КонтрагентКПП"" type=""text"" class=""form-control"" data-inputmask=""'mask': '999999999'"" aria-label=""контрагентКПП"" aria-describedby=""inputко");
            WriteLiteral(@"нтрагентКПП"">
                    </div>
                </div>
                <div class=""input-group input-group-sm mb-3"">
                    <div class=""input-group-prepend"">
                        <span class=""input-group-text"">Адрес</span>
                    </div>
                    <input id=""контрагентАдрес"" type=""text"" class=""form-control"" aria-label=""контрагентАдрес"" aria-describedby=""inputконтрагентАдрес"">
                </div>
                <div class=""input-group input-group-sm mb-3"">
                    <div class=""input-group-prepend"">
                        <span class=""input-group-text"">Телефон</span>
                    </div>
                    <input id=""контрагентТелефон"" name=""КонтрагентТелефон"" type=""text"" class=""form-control"" data-inputmask=""'mask': '+7 999 999 99 99'"" aria-label=""контрагентТелефон"" aria-describedby=""inputконтрагентТелефон"">
                </div>
                <div class=""input-group input-group-sm mb-3"">
                    <div class=""inp");
            WriteLiteral(@"ut-group-prepend"">
                        <span class=""input-group-text"">Email</span>
                    </div>
                    <input id=""контрагентEmail"" name=""КонтрагентEmail"" type=""text"" class=""form-control"" data-inputmask=""'alias': 'email'"" aria-label=""контрагентEmail"" aria-describedby=""inputконтрагентEmail"">
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" id=""btnSave"" class=""btn btn-primary"" onclick=""btnНовыйКонтрагентSaveClick()"">Сохранить</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<script>
    var newCustomerValidator = new Wellidate(document.getElementById(""новыйКонтрагент""), {
        summary: {
            container: ""[data-valmsg-summary=true]"",
            show(result) {
                if (this.container) {
                    CreateManualSummary(result, ""ОшибкиНовогоКонтрагента"", ");
            WriteLiteral(@"[""КонтрагентНаименование"", ""КонтрагентИНН"", ""КонтрагентКПП"", ""КонтрагентТелефон"", ""КонтрагентEmail""]);
                }
            },
            reset() {
                this.show({
                    isValid: true,
                    invalid: [],
                    valid: []
                });
            }
        },
        rules: {
            ""#контрагентНаименование"": {
                required: {
                    trim: true,
                    message: ""Укажите наименование"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid() {
                        return this.element.value != null && this.element.value != """";
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
  ");
            WriteLiteral(@"              }
            },
            ""#контрагентИНН"": {
                required: {
                    trim: true,
                    message: ""Укажите ИНН"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid() {
                        if ($(""input:radio[name=ВидКонтрагента]:checked"").val() == 2)
                            return this.element.value != null && this.element.value != """";
                        else
                            return true;
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                length: {
                    min: 10,
                    max: 12,
                    trim: true,
                    message: ""ИНН должен с");
            WriteLiteral(@"одержать {0} или {1} знаков"",
                    formatMessage() {
                        return this.message.replace(""{0}"", this.min).replace(""{1}"", this.max);
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if (validatable.isValid) {
                            var value = this.element.value.replace(/^_+|_+$/, """");
                            if ($(""input:radio[name=ВидКонтрагента]:checked"").val() == 2)
                                return value.length == this.min || value.length == this.max;
                            else
                                return true;
                        }
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                remote: {
                    url: ""ПроверкаДубли");
            WriteLiteral(@"рованияИНН"",
                    additionalFields: """",
                    type: ""post"",
                    trim: true,
                    message: ""Please fix this field."",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if ($(""input:radio[name=ВидКонтрагента]:checked"").val() == 2 && ($('#контрагентИНН').val().length == 12 || ($('#контрагентИНН').val().length == 10 && $('#контрагентКПП').val().replaceAll(""_"", """").length == 9))) {
                            const remote = this;

                            if (remote.controller) {
                                remote.controller.abort();
                            }

                            clearTimeout(remote.start);
                            remote.start = setTimeout(() => {
                                if (");
            WriteLiteral(@"validatable.isValid) {
                                    remote.controller = new AbortController();
                                    var data = new FormData();
                                    data.append(""ИНН"", $('#контрагентИНН').val());
                                    data.append(""КПП"", $('#контрагентКПП').val());

                                    fetch(remote.url, {
                                        method: remote.type,
                                        headers: { ""X-Requested-With"": ""XMLHttpRequest"" },
                                        body: data
                                    }).then(response => {
                                        if (validatable.isValid && response.ok) {
                                            return response.json();
                                        }
                                        return """";
                                    }).then(response => {
                                        if (response) {
 ");
            WriteLiteral(@"                                           remote.apply(validatable, response);
                                        }
                                    });

                                    remote.prepare(validatable);

                                    validatable.pending();
                                }
                            }, 1);
                        }
                        return true;
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    },
                    prepare(validatable) {
                    },
                    apply(validatable, response) {
                        if (response != """") {
                            if (response.isValid)
                                validatable.success(response.message);
                            else
                                validatable.error(""remote"", response.message);
         ");
            WriteLiteral(@"               }
                        else
                            validatable.error(""remote"", ""wrong response"");
                        RefreshSummary(""ОшибкиНовогоКонтрагент"", [""КонтрагентНаименование"", ""КонтрагентИНН"", ""КонтрагентКПП"", ""КонтрагентТелефон"", ""КонтрагентEmail""]);
                    }
                }
            },
            ""#контрагентКПП"": {
                required: {
                    max: 10,
                    trim: true,
                    message: ""Укажите КПП"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if (validatable.isValid) {
                            var value = this.element.value.replace(/^_+|_+$/, """");
                            const инн = document.getElementById(""контрагентИНН"");
                            var ин");
            WriteLiteral(@"н_value = инн.value.replace(/^_+|_+$/, """");
                            return инн_value == """" || инн_value.length != this.max || (инн_value.length == this.max && value != """");
                        }
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                not_required: {
                    max: 10,
                    trim: true,
                    message: ""КПП должен быть пустым"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if (validatable.isValid) {
                            var value = $(""#контрагентКПП"").val().replaceAll(""_"", """");
                            const инн = $(""#контрагентИНН"").val().replaceAll(");
            WriteLiteral(@"""_"", """");
                            return инн == """" || value == """" || !(инн.length != this.max && value != """");
                        }
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                length: {
                    min: 9,
                    trim: true,
                    message: ""КПП должен содержать {0} знаков"",
                    formatMessage() {
                        return this.message.replace(""{0}"", this.min);
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if (validatable.isValid) {
                            var value = this.element.value.replace(/^_+|_+$/, """");
                            if (value != """")
                                return (this.min == value.length);
  ");
            WriteLiteral(@"                          else
                                return true;
                        }
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                remote: {
                    url: ""ПроверкаДублированияИНН"",
                    additionalFields: """",
                    type: ""post"",
                    trim: true,
                    message: ""Please fix this field."",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if ($(""input:radio[name=ВидКонтрагента]:checked"").val() == 2 && ($('#контрагентИНН').val().replaceAll(""_"", """").length == 10 && $('#контрагентКПП').val().replaceAll(""_"", """").length == 9)) {
         ");
            WriteLiteral(@"                   const remote = this;

                            if (remote.controller) {
                                remote.controller.abort();
                            }

                            clearTimeout(remote.start);
                            remote.start = setTimeout(() => {
                                if (validatable.isValid) {
                                    remote.controller = new AbortController();
                                    var data = new FormData();
                                    data.append(""ИНН"", $('#контрагентИНН').val());
                                    data.append(""КПП"", $('#контрагентКПП').val());

                                    fetch(remote.url, {
                                        method: remote.type,
                                        headers: { ""X-Requested-With"": ""XMLHttpRequest"" },
                                        body: data
                                    }).then(response => {
                  ");
            WriteLiteral(@"                      if (validatable.isValid && response.ok) {
                                            return response.json();
                                        }
                                        return """";
                                    }).then(response => {
                                        if (response) {
                                            remote.apply(validatable, response);
                                        }
                                    });

                                    remote.prepare(validatable);

                                    validatable.pending();
                                }
                            }, 1);
                        }
                        return true;
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    },
                    prepare(validatable) {
                    },");
            WriteLiteral(@"
                    apply(validatable, response) {
                        if (response != """") {
                            if (response.isValid)
                                validatable.success(response.message);
                            else
                                validatable.error(""remote"", response.message);
                        }
                        else
                            validatable.error(""remote"", ""wrong response"");
                        RefreshSummary(""ОшибкиНовогоКонтрагента"", [""КонтрагентНаименование"", ""КонтрагентИНН"", ""КонтрагентКПП"", ""КонтрагентТелефон"", ""КонтрагентEmail""]);
                    }
                }
            },
            ""#контрагентТелефон"": {
                required: {
                    trim: true,
                    message: ""Укажите телефон"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return tru");
            WriteLiteral(@"e;
                    },
                    isValid() {
                        const email = document.getElementById(""контрагентEmail"");
                        return (this.element.value != null && this.element.value != """") || (email.value != null && email.value != """")
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                length: {
                    min: 10,
                    trim: true,
                    message: ""Телефон должен содержать {0} знаков"",
                    formatMessage() {
                        return this.message.replace(""{0}"", this.min);
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if (validatable.isValid) {
                            var value = this.element.value.r");
            WriteLiteral(@"eplace(""+7"", """").replaceAll(""_"", """").replaceAll("" "", """").trim();
                            if (value != """")
                                return (this.min == value.length);
                            else
                                return true;
                        }
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                }
            },
            ""#контрагентEmail"": {
                required: {
                    trim: true,
                    message: "" и/или email"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid() {
                        const phone = document.getElementById(""контрагентТелефон"");
                        return (this.element.value != nu");
            WriteLiteral(@"ll && this.element.value != """") || (phone.value != null && phone.value != """")
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                },
                email: {
                    trim: true,
                    message: ""Введите правильный email"",
                    formatMessage() {
                        return this.message;
                    },
                    isEnabled() {
                        return true;
                    },
                    isValid(validatable) {
                        if (validatable.isValid) {
                            var value = this.element.value.replaceAll(""_"", """").replaceAll("" "", """").trim();
                            if (value != """")
                                return /^$|^([\w\.\-]+)");
            WriteLiteral(@"@([\w\-]+)((\.(\w){2,3})+)$/.test(value);
                            else
                                return true;
                        }
                    },
                    normalizeValue() {
                        return this.trim ? this.element.value.trim() : this.element.value;
                    }
                }
            }
        }
    });
    $('input[type=radio][name=ВидКонтрагента]').on('change', function () {
        $(""#инн"").collapse($(""input:radio[name=ВидКонтрагента]:checked"").val() == 1 ? ""hide"" : ""show"");
    });
    function btnНовыйКонтрагентSaveClick() {
        if (newCustomerValidator.form()) {
            var proceed = true;
            if ($(""input:radio[name=ВидКонтрагента]:checked"").val() == 2)
                $.ajax({
                    url: ""ПроверкаДублированияИНН"",
                    type: ""post"",
                    datatype: ""xml"",
                    data: {
                        ИНН: $('#контрагентИНН').val(),
               ");
            WriteLiteral(@"         КПП: $('#контрагентКПП').val(),
                    },
                    async: false,
                    cache: false,
                    success: function (data) {
                        proceed = data.isValid;
                    },
                    error: function (e, v, f) {
                        proceed = false;
                        alert(""ошибка выполнения проверки"");
                    }
                });
            if (proceed)
                $.ajax({
                    url: ""НовыйКонтрагент"",
                    type: ""post"",
                    datatype: ""xml"",
                    data: {
                        ВидКонтрагента: $(""input:radio[name=ВидКонтрагента]:checked"").val(),
                        Наименование: $('#контрагентНаименование').val(),
                        ИНН: $('#контрагентИНН').val(),
                        КПП: $('#контрагентКПП').val(),
                        Адрес: $('#контрагентАдрес').val(),
                        Тел");
            WriteLiteral(@"ефон: $('#контрагентТелефон').val(),
                        Email: $('#контрагентEmail').val()
                    },
                    async: true,
                    cache: false,
                    success: function (data) {
                        var elementId = $(""#контрагентlookupId"").val();
                        var lookup = new MvcLookup(document.getElementById(elementId));
                        lookup.values[0].value = data.id;
                        lookup.reload();
                        $(""#новыйКонтрагент"").modal(""hide"");
                    },
                    error: function (e, v, f) {
                        alert(""ошибка выполнения: "" + e.message + ""!"");
                    }
                });
        }
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
