using StinClasses.Регистры;
using StinClasses.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using StinClasses.Справочники;

namespace StinClasses.Документы
{
    public class ФормаРеализация
    {
        public ExceptionData Ошибка { get; set; }
        public ОбщиеРеквизиты Общие { get; set; }
        public KeyValuePair<string, string> КодОперации { get; set; }
        public string НаборId { get; set; }
        public List<ФормаНабор> Наборы { get; set; }
        public int ЧужойТовар { get; set; }
        public Склад Склад { get; set; }
        public ПодСклад ПодСклад { get; set; }
        public Контрагент Контрагент { get; set; }
        public Договор Договор { get; set; }
        public Маршрут Маршрут { get; set; }
        public bool УчитыватьНДС { get; set; }
        public bool СуммаВклНДС { get; set; }
        public ТипЦен ТипЦен { get; set; }
        public Скидка Скидка { get; set; }
        public СкидКарта СкидКарта { get; set; }
        public DateTime ДатаОплаты { get; set; }
        public bool СниматьРезерв { get; set; }
        public Order Order { get; set; }
        public bool Закрыт { get; set; }
        public List<ФормаРеализацияТЧ> ТабличнаяЧасть { get; set; }
        public ФормаРеализация()
        {
            Общие = new ОбщиеРеквизиты();
            ТабличнаяЧасть = new List<ФормаРеализацияТЧ>();
        }
    }
    public class ФормаРеализацияТЧ
    {
        public Номенклатура Номенклатура { get; set; }
        public decimal Количество { get; set; }
        public Единица Единица { get; set; }
        public decimal Цена { get; set; }
        public decimal Сумма { get; set; }
        public СтавкаНДС СтавкаНДС { get; set; }
        public decimal СуммаНДС { get; set; }
    }
    public interface IРеализация : IДокумент
    {
        Task<ФормаРеализация> ВводНаОснованииAsync(ФормаПродажа докОснование, string фирмаId, List<ФормаПродажаТЧ> строкиПродажи, List<ФормаПродажаТЧ> строкиУслуг);
        Task<ФормаРеализация> ВводНаОснованииAsync(ФормаКомплекснаяПродажа докОснование, DateTime docDateTime, string фирмаId, List<ФормаПродажаТЧ> строкиПродажи, List<ФормаПродажаТЧ> строкиУслуг);
        Task<ExceptionData> ЗаписатьAsync(ФормаРеализация doc);
        Task<ExceptionData> ПровестиAsync(ФормаРеализация doc);
        Task<ExceptionData> ЗаписатьПровестиAsync(ФормаРеализация doc);
    }
    public class Реализация : Документ, IРеализация
    {
        private IРегистрНаборНаСкладе _регистрНабор;
        private IРегистрПартииНаличие _регистрПартииНаличие;
        private IРегистрПартииОтданные _регистрПартииОтданные;
        private IРегистрЗаменаНоменклатуры _регистрЗаменаНоменклатуры;
        private IРегистрПродажи _регистрПродажи;
        private IРегистрПрямыеПродажи _регистрПрямыеПродажи;
        private IРегистрПокупатели _регистрПокупатели;
        private IРегистрКнигаПродаж _регистрКнигаПродаж;
        private IРегистрРеализованныйТовар _регистрРеализованныйТовар;
        private IРегистрНакопСкидка _регистрНакопСкидка;
        public Реализация(StinDbContext context) : base(context)
        {
            _регистрНабор = new Регистр_НаборНаСкладе(context);
            _регистрПартииНаличие = new Регистр_ПартииНаличие(context);
            _регистрПартииОтданные = new Регистр_ПартииОтданные(context);
            _регистрЗаменаНоменклатуры = new Регистр_ЗаменаНоменклатуры(context);
            _регистрПродажи = new Регистр_Продажи(context);
            _регистрПрямыеПродажи = new Регистр_ПрямыеПродажи(context);
            _регистрПокупатели = new Регистр_Покупатели(context);
            _регистрКнигаПродаж = new Регистр_КнигаПродаж(context);
            _регистрРеализованныйТовар = new Регистр_РеализованныйТовар(context);
            _регистрНакопСкидка = new Регистр_НакопСкидка(context);
        }
        protected override void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    _регистрНабор.Dispose();
                    _регистрПартииНаличие.Dispose();
                    _регистрПартииОтданные.Dispose();
                    _регистрЗаменаНоменклатуры.Dispose();
                    _регистрПродажи.Dispose();
                    _регистрПрямыеПродажи.Dispose();
                    _регистрПокупатели.Dispose();
                    _регистрКнигаПродаж.Dispose();
                    _регистрРеализованныйТовар.Dispose();
                    _регистрНакопСкидка.Dispose();
                }
            }
            base.Dispose(disposing);
        }
        private string ВидДолга(string СтатусПартииId)
        {
            string статусName = Common.GetСтатусПартииName(СтатусПартииId);

            if (статусName == "Товар (принятый)")
                return "   5IW   "; //Долг за товара принятые в рознице
            else if (статусName == "Товар (в рознице)")
                return "   4XV   ";  //Долг за товары в рознице
            else if (статусName == "Услуга")
                return "   2VJ   "; //Долг за услуги
            else
                return "    B1   "; //Долг за товары
        }
        public async Task<ФормаРеализация> ВводНаОснованииAsync(ФормаКомплекснаяПродажа докОснование, DateTime docDateTime, string фирмаId, List<ФормаПродажаТЧ> строкиПродажи, List<ФормаПродажаТЧ> строкиУслуг)
        {
            ФормаРеализация doc = new ФормаРеализация();

            doc.Общие.ДокОснование = await ДокОснованиеAsync(докОснование.Общие.IdDoc);
            doc.Общие.Автор = докОснование.Общие.Автор;
            doc.Общие.ВидДокумента10 = (int)ВидДокумента.Реализация; //1611
            doc.Общие.ВидДокумента36 = Common.Encode36(doc.Общие.ВидДокумента10);
            doc.Общие.Фирма = doc.Общие.ДокОснование.Фирма;

            doc.Общие.ДатаДок = docDateTime <= Common.min1cDate ? DateTime.Now : docDateTime;

            doc.Общие.Комментарий = string.IsNullOrEmpty(докОснование.Общие.Комментарий) ? "" : докОснование.Общие.Комментарий.Trim();

            doc.Наборы = докОснование.ТабличнаяЧасть.Where(x => x.Набор != null).Select(x => x.Набор).ToList();

            doc.КодОперации = докОснование.КодОперации;
            doc.Склад = докОснование.Склад;
            doc.ПодСклад = _склад.ПолучитьПодСклады(doc.Склад.Id).FirstOrDefault();
            doc.Контрагент = докОснование.Контрагент;
            doc.Договор = докОснование.Договор;
            doc.СниматьРезерв = true;
            doc.ДатаОплаты = докОснование.ДатаОплаты;
            doc.СкидКарта = докОснование.СкидКарта;
            doc.Маршрут = докОснование.Маршрут;
            doc.УчитыватьНДС = докОснование.УчитыватьНДС;
            doc.СуммаВклНДС = докОснование.СуммаВклНДС;
            doc.ТипЦен = докОснование.ТипЦен;
            doc.Скидка = докОснование.Скидка;

            if (doc.Общие.Фирма.Id == фирмаId)
                doc.ЧужойТовар = 1;
            else if (фирмаId == await _фирма.ПолучитьФирмуДляОптаAsync())
                doc.ЧужойТовар = 2;
            else if (фирмаId == await _фирма.ПолучитьФирмуДляОпта2Async())
                doc.ЧужойТовар = 3;
            else if (фирмаId == await _фирма.ПолучитьФирмуДляОпта3Async())
                doc.ЧужойТовар = 4;
            else
                doc.ЧужойТовар = 1;

            doc.Order = докОснование.Order;
            doc.Закрыт = (doc.КодОперации.Key == "   15P   ") && !_контрагент.ПроверкаНаОфКомиссию(doc.Контрагент.Id); //Реализация (комиссия))

            foreach (var row in строкиПродажи)
            {
                doc.ТабличнаяЧасть.Add(new ФормаРеализацияТЧ
                {
                    Номенклатура = row.Номенклатура,
                    Единица = row.Единица,
                    Количество = row.Количество,
                    Цена = row.Количество == 0 ? 1 : row.Сумма / row.Количество,
                    Сумма = row.Сумма,
                    СтавкаНДС = row.СтавкаНДС,
                    СуммаНДС = row.СуммаНДС,
                });
            }
            foreach (var row in строкиУслуг)
            {
                doc.ТабличнаяЧасть.Add(new ФормаРеализацияТЧ
                {
                    Номенклатура = row.Номенклатура,
                    Единица = row.Единица,
                    Количество = row.Количество,
                    Цена = row.Количество == 0 ? 1 : row.Сумма / row.Количество,
                    Сумма = row.Сумма,
                    СтавкаНДС = row.СтавкаНДС,
                    СуммаНДС = row.СуммаНДС,
                });
            }
            return doc;
        }
        public async Task<ФормаРеализация> ВводНаОснованииAsync(ФормаПродажа докОснование, string фирмаId, List<ФормаПродажаТЧ> строкиПродажи, List<ФормаПродажаТЧ> строкиУслуг)
        {
            ФормаРеализация doc = new ФормаРеализация();

            doc.Общие.ДокОснование = await ДокОснованиеAsync(докОснование.Общие.IdDoc);
            doc.Общие.Автор = докОснование.Общие.Автор;
            doc.Общие.ВидДокумента10 = (int)ВидДокумента.Реализация; //1611
            doc.Общие.ВидДокумента36 = Common.Encode36(doc.Общие.ВидДокумента10);
            doc.Общие.Фирма = doc.Общие.ДокОснование.Фирма;

            doc.Общие.ДатаДок = DateTime.Now;

            doc.Общие.Комментарий = string.IsNullOrEmpty(докОснование.Общие.Комментарий) ? "" : докОснование.Общие.Комментарий.Trim();

            if ((докОснование.Общие.ДокОснование != null) && (докОснование.Общие.ДокОснование.ВидДокумента10 == (int)ВидДокумента.Набор))
                doc.НаборId = докОснование.Общие.ДокОснование.IdDoc;

            doc.КодОперации = докОснование.КодОперации;
            doc.Склад = докОснование.Склад;
            doc.ПодСклад = докОснование.ПодСклад;
            doc.Контрагент = докОснование.Контрагент;
            doc.Договор = докОснование.Договор;
            doc.СниматьРезерв = докОснование.СниматьРезерв;
            doc.ДатаОплаты = докОснование.ДатаОплаты;
            doc.СкидКарта = докОснование.СкидКарта;
            doc.Маршрут = докОснование.Маршрут;
            doc.УчитыватьНДС = докОснование.УчитыватьНДС;
            doc.СуммаВклНДС = докОснование.СуммаВклНДС;
            doc.ТипЦен = докОснование.ТипЦен;
            doc.Скидка = докОснование.Скидка;

            if (doc.Общие.Фирма.Id == фирмаId)
                doc.ЧужойТовар = 1;
            else if (фирмаId == await _фирма.ПолучитьФирмуДляОптаAsync())
                doc.ЧужойТовар = 2;
            else if (фирмаId == await _фирма.ПолучитьФирмуДляОпта2Async())
                doc.ЧужойТовар = 3;
            else if (фирмаId == await _фирма.ПолучитьФирмуДляОпта3Async())
                doc.ЧужойТовар = 4;
            else
                doc.ЧужойТовар = 1;

            doc.Order = докОснование.Order;
            doc.Закрыт = (doc.КодОперации.Key == "   15P   ") && !_контрагент.ПроверкаНаОфКомиссию(doc.Контрагент.Id); //Реализация (комиссия))

            foreach (var row in строкиПродажи)
            {
                doc.ТабличнаяЧасть.Add(new ФормаРеализацияТЧ
                {
                    Номенклатура = row.Номенклатура,
                    Единица = row.Единица,
                    Количество = row.Количество,
                    Цена = row.Количество == 0 ? 1 : row.Сумма / row.Количество,
                    Сумма = row.Сумма,
                    СтавкаНДС = row.СтавкаНДС,
                    СуммаНДС = row.СуммаНДС,
                });
            }
            foreach (var row in строкиУслуг)
            {
                doc.ТабличнаяЧасть.Add(new ФормаРеализацияТЧ
                {
                    Номенклатура = row.Номенклатура,
                    Единица = row.Единица,
                    Количество = row.Количество,
                    Цена = row.Количество == 0 ? 1 : row.Сумма / row.Количество,
                    Сумма = row.Сумма,
                    СтавкаНДС = row.СтавкаНДС,
                    СуммаНДС = row.СуммаНДС,
                });
            }
            return doc;
        }
        public async Task<ExceptionData> ЗаписатьAsync(ФормаРеализация doc)
        {
            try
            {
                _1sjourn j = GetEntityJourn(_context, 4588, doc.Общие.ВидДокумента10, Common.НумераторТОРГ12, "Реализация",
                    null, doc.Общие.ДатаДок,
                    doc.Общие.Фирма.Id,
                    doc.Общие.Автор.Id,
                    doc.Склад.Наименование,
                    doc.Контрагент.Наименование);

                doc.Общие.IdDoc = j.Iddoc;
                doc.Общие.DateTimeIdDoc = j.DateTimeIddoc;
                doc.Общие.НомерДок = j.Docno;
                Dh1611 docHeader = new Dh1611
                {
                    Iddoc = j.Iddoc,
                    Sp3338 = doc.КодОперации.Key,
                    Sp1587 = doc.Общие.ДокОснование != null ? doc.Общие.ДокОснование.Значение : Common.ПустоеЗначениеИд13,
                    Sp1593 = doc.Склад.Id,
                    Sp1583 = doc.Контрагент.Id,
                    Sp1584 = doc.Договор.Id,
                    Sp1585 = Common.ВалютаРубль,
                    Sp1586 = 1, //Курс
                    Sp8818 = 0, //ОблагаетсяЕНВД
                    Sp1589 = doc.УчитыватьНДС ? 1 : 0,
                    Sp1590 = doc.СуммаВклНДС ? 1 : 0,
                    Sp1591 = 0, //УчитыватьНП
                    Sp1592 = 0, //СуммаВклНП
                    Sp1595 = doc.ТипЦен.Id,
                    Sp1596 = doc.Скидка != null ? doc.Скидка.Id : Common.ПустоеЗначение,
                    Sp1594 = doc.ТабличнаяЧасть.Sum(x => x.Сумма), //СуммаВзаиморасчетов
                    Sp1588 = doc.ДатаОплаты,
                    Sp7550 = 0, //флагСвертки
                    Sp8673 = doc.СкидКарта == null ? Common.ПустоеЗначение : doc.СкидКарта.Id,
                    Sp8691 = doc.СниматьРезерв ? 1 : 0,
                    Sp9000 = doc.ПодСклад.Id,
                    Sp9001 = 0, //НакопДокум
                    Sp9537 = doc.ЧужойТовар,
                    Sp9538 = doc.Закрыт ? 1 : 0, //закрыт
                    Sp10268 = Common.ПустоеЗначение, //Водитель
                    Sp11568 = doc.Маршрут != null ? doc.Маршрут.Code : "", //ИндМаршрута
                    Sp11569 = doc.Маршрут != null ? doc.Маршрут.Наименование : "", //НомерМаршрута
                    Sp1604 = 0, //Сумма
                    Sp1605 = 0, //СуммаНДС
                    Sp1606 = 0, //СуммаНП
                    Sp660 = string.IsNullOrEmpty(doc.Общие.Комментарий) ? "" : doc.Общие.Комментарий,
                };
                await _context.Dh1611s.AddAsync(docHeader);

                short lineNo = 1;
                foreach (var item in doc.ТабличнаяЧасть)
                {
                    Dt1611 docRow = new Dt1611
                    {
                        Iddoc = j.Iddoc,
                        Lineno = lineNo++,
                        Sp1599 = item.Номенклатура.Id,
                        Sp1600 = item.Количество,
                        Sp1601 = item.Единица.Id,
                        Sp1602 = item.Единица.Коэффициент,
                        Sp1603 = item.Цена,
                        Sp1604 = item.Сумма,
                        Sp1608 = item.СтавкаНДС.Id,
                        Sp1605 = item.СуммаНДС,
                        Sp1609 = Common.ПустоеЗначение, //СтавкаНП
                        Sp1606 = 0, //СуммаНП
                        Sp1607 = Common.ПустоеЗначение, //Партия
                    };
                    await _context.Dt1611s.AddAsync(docRow);
                }

                _context.РегистрацияИзмененийРаспределеннойИБ(doc.Общие.ВидДокумента10, j.Iddoc);
                await _context.SaveChangesAsync();

                await ОбновитьTotals(doc.Общие.ВидДокумента10, j.Iddoc);
                if (doc.Общие.ДокОснование != null)
                    await ОбновитьПодчиненныеДокументы(doc.Общие.ДокОснование.Значение, j.DateTimeIddoc, j.Iddoc);
                //склад
                await ОбновитьГрафыОтбора(4747, Common.Encode36(55).PadLeft(4) + doc.Склад.Id, j.DateTimeIddoc, j.Iddoc);
                //контрагент
                await ОбновитьГрафыОтбора(862, Common.Encode36(172).PadLeft(4) + doc.Контрагент.Id, j.DateTimeIddoc, j.Iddoc);
            }
            catch (DbUpdateException db_ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = db_ex.HResult, Description = db_ex.InnerException.ToString() };
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = ex.HResult, Description = ex.Message };
            }
            return null;
        }
        public async Task<ExceptionData> ПровестиAsync(ФормаРеализация doc)
        {
            try
            {
                _1sjourn j = await _context._1sjourns.FirstOrDefaultAsync(x => x.Iddoc == doc.Общие.IdDoc);
                if (j == null)
                {
                    if (_context.Database.CurrentTransaction != null)
                        _context.Database.CurrentTransaction.Rollback();
                    return new ExceptionData { Description = "Не обнаружена запись журнала." };
                }
                string message = "";
                int КоличествоДвижений = j.Actcnt;
                List<string> списокТМЦ = doc.ТабличнаяЧасть.Select(x => x.Номенклатура.Id).ToList();
                string фирмаId = doc.Общие.Фирма.Id;
                if (doc.ЧужойТовар == 4)
                    фирмаId = await _фирма.ПолучитьФирмуДляОпта3Async();
                else if (doc.ЧужойТовар == 3)
                    фирмаId = await _фирма.ПолучитьФирмуДляОпта2Async();
                else if (doc.ЧужойТовар == 2)
                    фирмаId = await _фирма.ПолучитьФирмуДляОптаAsync();

                bool этоПередачаНаРеализацию = doc.КодОперации.Key == "   15P   "; //Реализация (комиссия))
                string фирмаПартииОтданные = фирмаId;
                if (_контрагент.ПроверкаНаОфКомиссию(doc.Контрагент.Id))
                    фирмаПартииОтданные = doc.Общие.Фирма.Id;
                if (этоПередачаНаРеализацию && (doc.Order == null) && doc.ТабличнаяЧасть.Any(x => x.Номенклатура.ЭтоУслуга))
                    return new ExceptionData { Description = "Услуги и работы отдавать на реализацию невозможно!" };
                var СтатусПартииКупленный = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                var ДокПередачиId13 = doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc;
                if (этоПередачаНаРеализацию && (doc.Order != null))
                    ДокПередачиId13 = doc.Общие.ДокОснование.Значение;

                List<string> списокФирм = new List<string> { фирмаId };
                List<string> списокФирмДокумента = new List<string> { doc.Общие.Фирма.Id };
                if (!doc.Закрыт && (doc.ЧужойТовар > 1)) //Перемещение
                {
                    var партииНаличие_Остатки = await _регистрПартииНаличие.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        списокФирм,
                        списокТМЦ,
                        null,
                        null);
                    var РегПартииНаличие_Итоги = партииНаличие_Остатки.OrderBy(x => x.ФирмаId).ThenBy(x => x.ДатаПартии).ThenBy(x => x.DateTimeIdDoc);
                    var ТаблСписПартийПерем = Enumerable.Repeat(new
                    {
                        НомерСтрокиДокумента = (short)0,
                        НоменклатураId = "",
                        СтатусПартииId = "",
                        ПартияId = "",
                        ДатаПартии = DateTime.MinValue,
                        ЦенаПрод = 0.00m,
                        Количество = 0.000m,
                        СуммаУпр = 0.00m,
                        СуммаБух = 0.00m,
                        СуммаБезНДС = 0.00m,
                        СуммаПрод = 0.00m
                    }, 0).ToList();
                    short lineNoПерем = 0;
                    foreach (var строка in doc.ТабличнаяЧасть.Where(x => !x.Номенклатура.ЭтоУслуга))
                    {
                        lineNoПерем++;
                        decimal КолВо = строка.Количество * строка.Единица.Коэффициент;
                        var ОстПогСуммаПродРуб = строка.Сумма + ((doc.УчитыватьНДС && !doc.СуммаВклНДС) ? строка.СуммаНДС : 0);
                        var ОстПогНДСПрод = doc.УчитыватьНДС ? строка.СуммаНДС : 0;
                        var МожноОтпустить = КолВо;
                        foreach (var r in РегПартииНаличие_Итоги.Where(x => x.НоменклатураId == строка.Номенклатура.Id))
                        {
                            if (МожноОтпустить <= 0)
                                break;
                            var КоэфСписания = 1m;
                            if (r.Количество > МожноОтпустить)
                                КоэфСписания = МожноОтпустить / r.Количество;
                            decimal кСписанию = Math.Round(r.Количество * КоэфСписания, 5, MidpointRounding.AwayFromZero);
                            decimal СуммаУпр = Math.Round(r.СуммаУпр * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                            decimal СуммаРуб = Math.Round(r.СуммаРуб * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                            decimal СуммаБезНДС = Math.Round(r.СуммаБезНДС * КоэфСписания, 2, MidpointRounding.AwayFromZero);

                            decimal КоэффПогашения = кСписанию / МожноОтпустить;
                            МожноОтпустить = МожноОтпустить - кСписанию;

                            var СписСуммаПродРуб = Math.Round(ОстПогСуммаПродРуб * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                            var СписНДСПрод = Math.Round(ОстПогНДСПрод * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                            var Выручка = Math.Round(СписСуммаПродРуб - СписНДСПрод, 2, MidpointRounding.AwayFromZero);

                            ОстПогСуммаПродРуб = ОстПогСуммаПродРуб - СписСуммаПродРуб;
                            ОстПогНДСПрод = ОстПогНДСПрод - СписНДСПрод;

                            ТаблСписПартийПерем.Add(new
                            {
                                НомерСтрокиДокумента = lineNoПерем,
                                НоменклатураId = строка.Номенклатура.Id,
                                СтатусПартииId = r.СтатусПартииId,
                                ПартияId = r.ПартияId,
                                ДатаПартии = r.ДатаПартии,
                                ЦенаПрод = r.ЦенаПрод,
                                Количество = кСписанию,
                                СуммаУпр = СуммаУпр,
                                СуммаБух = СуммаРуб,
                                СуммаБезНДС = СуммаБезНДС,
                                СуммаПрод = СписСуммаПродРуб
                            });

                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                lineNoПерем, фирмаId, строка.Номенклатура.Id, r.СтатусПартииId, r.ПартияId, r.ДатаПартии, r.ЦенаПрод,
                                кСписанию, СуммаУпр, СуммаРуб, СуммаБезНДС, doc.КодОперации.Key, СписСуммаПродРуб, Выручка
                                );
                        }
                        if (МожноОтпустить > 0)
                        {
                            var СтатусПартии = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                            var Выручка = Math.Round(ОстПогСуммаПродРуб - ОстПогНДСПрод, 2, MidpointRounding.AwayFromZero);
                            ТаблСписПартийПерем.Add(new
                            {
                                НомерСтрокиДокумента = lineNoПерем,
                                НоменклатураId = строка.Номенклатура.Id,
                                СтатусПартииId = СтатусПартии,
                                ПартияId = Common.ПустоеЗначение,
                                ДатаПартии = Common.min1cDate,
                                ЦенаПрод = 0m,
                                Количество = МожноОтпустить,
                                СуммаУпр = 0m,
                                СуммаБух = 0m,
                                СуммаБезНДС = 0m,
                                СуммаПрод = ОстПогСуммаПродРуб
                            });
                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                lineNoПерем, фирмаId, строка.Номенклатура.Id, СтатусПартии, Common.ПустоеЗначение, Common.min1cDate, 0,
                                МожноОтпустить, 0, 0, 0, doc.КодОперации.Key, ОстПогСуммаПродРуб, Выручка
                                );
                        }
                        var РегистрЗаменыНоменклатуры_Остатки = await _регистрЗаменаНоменклатуры.ПолучитьОстаткиAsync(
                                doc.Общие.ДатаДок,
                                doc.Общие.IdDoc,
                                false,
                                фирмаId,
                                списокТМЦ
                                );
                        МожноОтпустить = КолВо;
                        foreach (var r in РегистрЗаменыНоменклатуры_Остатки)
                        {
                            var КолСписания = Math.Max(Math.Min(МожноОтпустить, r.Количество), 0);
                            if (КолСписания > 0)
                            {
                                КоличествоДвижений++;
                                j.Rf12351 = await _регистрЗаменаНоменклатуры.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                    фирмаId, r.НоменклатураБухId, r.НоменклатураОБId, КолСписания
                                    );
                                МожноОтпустить = МожноОтпустить - КолСписания;
                            }
                            if (МожноОтпустить == 0)
                                break;
                        }
                    }
                    var КодОперации = Common.КодОперации.Where(x => x.Value == "Поступление ТМЦ (купля-продажа)").Select(x => x.Key).FirstOrDefault();
                    foreach (var r in ТаблСписПартийПерем)
                    {
                        КоличествоДвижений++;
                        j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                            r.НомерСтрокиДокумента, doc.Общие.Фирма.Id, r.НоменклатураId, r.СтатусПартииId, r.ПартияId, r.ДатаПартии, r.ЦенаПрод,
                            r.Количество, r.СуммаУпр, r.СуммаБух, r.СуммаБезНДС, КодОперации, r.СуммаПрод, 0
                            );
                    }
                }

                //Проведение
                List<РегистрНаборНаСкладе> наборНаСкладе_Остатки = null;
                if (doc.Наборы != null && doc.Наборы.Count > 0)
                {
                    наборНаСкладе_Остатки = await _регистрНабор.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        списокФирм,
                        doc.Склад.Id,
                        doc.Договор.Id,
                        списокТМЦ,
                        doc.Наборы.Select(x => x.Общие.IdDoc).ToList()
                        );
                }
                else
                {
                    наборНаСкладе_Остатки = await _регистрНабор.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        списокФирм,
                        doc.Склад.Id,
                        doc.Договор.Id,
                        списокТМЦ,
                        doc.НаборId
                        );
                }
                short lineNo = 0;
                foreach (var строка in doc.ТабличнаяЧасть.Where(x => !x.Номенклатура.ЭтоУслуга))
                {
                    lineNo++;
                    decimal КолВо = строка.Количество * строка.Единица.Коэффициент;
                    if (doc.Наборы != null && doc.Наборы.Count > 0)
                    {
                        foreach (var набор in doc.Наборы.Where(x => x.ТабличнаяЧасть.Any(y => y.Номенклатура.Id == строка.Номенклатура.Id)))
                        {
                            var Остатки = наборНаСкладе_Остатки
                                .Where(x => (x.ФирмаId == фирмаId) && (x.СкладId == doc.Склад.Id) && (x.ПодСкладId == набор.ПодСклад.Id) && (x.ДоговорId == doc.Договор.Id) && (x.НаборId == набор.Общие.IdDoc) && (x.НоменклатураId == строка.Номенклатура.Id))
                                .Sum(x => x.Количество);
                            var МожноОтпустить = Math.Max(Math.Min(КолВо, Остатки), 0);
                            КолВо = КолВо - МожноОтпустить;
                            КоличествоДвижений++;
                            j.Rf11973 = await _регистрНабор.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                фирмаId, doc.Склад.Id, набор.ПодСклад.Id, doc.Договор.Id, набор.Общие.IdDoc, строка.Номенклатура.Id, МожноОтпустить);
                        }
                        if (КолВо > 0)
                        {
                            if (!string.IsNullOrEmpty(message))
                                message += Environment.NewLine;
                            message += "В наборе нет нужного свободного количества ТМЦ ";
                            if (!string.IsNullOrEmpty(строка.Номенклатура.Артикул))
                                message += "(" + строка.Номенклатура.Артикул + ") ";
                            if (!string.IsNullOrEmpty(строка.Номенклатура.Наименование))
                                message += строка.Номенклатура.Наименование;
                            else
                                message += "'" + строка.Номенклатура.Id + "'";
                            message += ". Всего осталось " + (КолВо / строка.Единица.Коэффициент + строка.Количество).ToString() +
                                ". Требуемое количество " + строка.Количество.ToString();
                        }
                    }
                    else
                    {
                        var Остатки = наборНаСкладе_Остатки
                            .Where(x => (x.ФирмаId == фирмаId) && (x.СкладId == doc.Склад.Id) && (x.ПодСкладId == doc.ПодСклад.Id) && (x.ДоговорId == doc.Договор.Id) && (x.НоменклатураId == строка.Номенклатура.Id))
                            .Sum(x => x.Количество);
                        var МожноОтпустить = Math.Max(Math.Min(КолВо, Остатки), 0);
                        if (МожноОтпустить < КолВо)
                        {
                            if (!string.IsNullOrEmpty(message))
                                message += Environment.NewLine;
                            message += "В наборе нет нужного свободного количества ТМЦ ";
                            if (!string.IsNullOrEmpty(строка.Номенклатура.Артикул))
                                message += "(" + строка.Номенклатура.Артикул + ") ";
                            if (!string.IsNullOrEmpty(строка.Номенклатура.Наименование))
                                message += строка.Номенклатура.Наименование;
                            else
                                message += "'" + строка.Номенклатура.Id + "'";
                            message += ". Всего осталось " + (Остатки / строка.Единица.Коэффициент).ToString() +
                                ". Требуемое количество " + строка.Количество.ToString();
                        }
                        else
                        {
                            КоличествоДвижений++;
                            j.Rf11973 = await _регистрНабор.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                фирмаId, doc.Склад.Id, doc.ПодСклад.Id, doc.Договор.Id, doc.НаборId, строка.Номенклатура.Id, МожноОтпустить);
                        }
                    }
                    if (этоПередачаНаРеализацию) //tmp
                    {
                        КоличествоДвижений++;
                        j.Rf351 = await _регистрПартииОтданные.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                            lineNo, фирмаПартииОтданные, doc.Договор.Id, строка.Номенклатура.Id, СтатусПартииКупленный, Common.ПустоеЗначение, ДокПередачиId13,
                            строка.Количество * строка.Единица.Коэффициент, 0, 0, 0, строка.Сумма, doc.КодОперации.Key, 0);
                    } // end tmp
                }
                if (этоПередачаНаРеализацию && (doc.Order != null) && doc.ТабличнаяЧасть.Any(x => x.Номенклатура.ЭтоУслуга)) //tmp
                {
                    foreach (var строка in doc.ТабличнаяЧасть.Where(x => x.Номенклатура.ЭтоУслуга))
                    {
                        lineNo++;
                        КоличествоДвижений++;
                        j.Rf351 = await _регистрПартииОтданные.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                            lineNo, фирмаПартииОтданные, doc.Договор.Id, строка.Номенклатура.Id, СтатусПартииКупленный, Common.ПустоеЗначение, ДокПередачиId13,
                            строка.Количество * строка.Единица.Коэффициент, 0, 0, 0, строка.Сумма, doc.КодОперации.Key, 0);
                    }
                } //end tmp
                if (!string.IsNullOrEmpty(message))
                    return new ExceptionData { Description = message };
                if (!этоПередачаНаРеализацию) //tmp
                {
                    var РегистрПартииНаличие_Остатки = await _регистрПартииНаличие.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        списокФирмДокумента,
                        списокТМЦ,
                        null,
                        null
                        );
                    var РегистрПартииНаличие_Итоги = РегистрПартииНаличие_Остатки.OrderBy(x => x.ФирмаId).ThenBy(x => x.ДатаПартии).ThenBy(x => x.DateTimeIdDoc);
                    var ТаблСписПартий = Enumerable.Repeat(new
                    {
                        НомерСтрокиДокумента = (short)0,
                        НоменклатураId = "",
                        Цена = 0.00m,
                        СтатусПартииId = "",
                        ПартияId = "",
                        ДатаПартии = DateTime.MinValue,
                        ЦенаПрод = 0.00m,
                        ПоставщикId = "",
                        ДоговорПоставщикаId = "",
                        СтавкаНДС = "",
                        Количество = 0.000m,
                        СуммаУпр = 0.00m,
                        СуммаБух = 0.00m,
                        СуммаБезНДС = 0.00m,
                        СуммаПрод = 0.00m,
                        СуммаНдсПрод = 0.00m
                    }, 0).ToList();
                    lineNo = 0;
                    foreach (var строка in doc.ТабличнаяЧасть.Where(x => !x.Номенклатура.ЭтоУслуга))
                    {
                        lineNo++;
                        decimal КолВо = строка.Количество * строка.Единица.Коэффициент;
                        var ОстПогСуммаПродРуб = строка.Сумма + ((doc.УчитыватьНДС && !doc.СуммаВклНДС) ? строка.СуммаНДС : 0);
                        var ОстПогНДСПрод = doc.УчитыватьНДС ? строка.СуммаНДС : 0;
                        var МожноОтпустить = КолВо;
                        foreach (var r in РегистрПартииНаличие_Итоги.Where(x => x.НоменклатураId == строка.Номенклатура.Id))
                        {
                            if (МожноОтпустить <= 0)
                                break;
                            string ПоставщикId = Common.ПустоеЗначение;
                            string ДоговорПоставщикаId = Common.ПустоеЗначение;
                            if (r.ПартияId != Common.ПустоеЗначение)
                            {
                                var ДанныеПартии = await _context.Sc214s
                                    .Where(x => x.Parentext == r.НоменклатураId && x.Id == r.ПартияId)
                                    .Select(x => new { Поставщик = x.Sp436, Договор = x.Sp217 })
                                    .FirstOrDefaultAsync();
                                if (ДанныеПартии == null)
                                {
                                    ПоставщикId = Common.ПустоеЗначение;
                                    ДоговорПоставщикаId = Common.ПустоеЗначение;
                                }
                            }
                            var КоэфСписания = 1m;
                            if (r.Количество > МожноОтпустить)
                                КоэфСписания = МожноОтпустить / r.Количество;
                            decimal кСписанию = Math.Round(r.Количество * КоэфСписания, 5, MidpointRounding.AwayFromZero);
                            decimal СуммаУпр = Math.Round(r.СуммаУпр * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                            decimal СуммаРуб = Math.Round(r.СуммаРуб * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                            decimal СуммаБезНДС = Math.Round(r.СуммаБезНДС * КоэфСписания, 2, MidpointRounding.AwayFromZero);

                            decimal КоэффПогашения = кСписанию / МожноОтпустить;
                            МожноОтпустить = МожноОтпустить - кСписанию;

                            var СписСуммаПродРуб = Math.Round(ОстПогСуммаПродРуб * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                            var СписНДСПрод = Math.Round(ОстПогНДСПрод * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                            var Выручка = Math.Round(СписСуммаПродРуб - СписНДСПрод, 2, MidpointRounding.AwayFromZero);

                            ОстПогСуммаПродРуб = ОстПогСуммаПродРуб - СписСуммаПродРуб;
                            ОстПогНДСПрод = ОстПогНДСПрод - СписНДСПрод;

                            ТаблСписПартий.Add(new
                            {
                                НомерСтрокиДокумента = lineNo,
                                НоменклатураId = строка.Номенклатура.Id,
                                Цена = строка.Цена,
                                СтатусПартииId = r.СтатусПартииId,
                                ПартияId = r.ПартияId,
                                ДатаПартии = r.ДатаПартии,
                                ЦенаПрод = r.ЦенаПрод,
                                ПоставщикId = ПоставщикId,
                                ДоговорПоставщикаId = ДоговорПоставщикаId,
                                СтавкаНДС = строка.СтавкаНДС.Id,
                                Количество = кСписанию,
                                СуммаУпр = СуммаУпр,
                                СуммаБух = СуммаРуб,
                                СуммаБезНДС = СуммаБезНДС,
                                СуммаПрод = СписСуммаПродРуб,
                                СуммаНдсПрод = СписНДСПрод
                            });

                            if (!этоПередачаНаРеализацию)
                            {
                                КоличествоДвижений++;
                                j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                    lineNo, doc.Общие.Фирма.Id, строка.Номенклатура.Id, r.СтатусПартииId, r.ПартияId, r.ДатаПартии, r.ЦенаПрод,
                                    кСписанию, СуммаУпр, СуммаРуб, СуммаБезНДС, doc.КодОперации.Key, СписСуммаПродРуб, Выручка
                                    );
                            }
                        }
                        if (МожноОтпустить > 0)
                        {
                            var спТоварКупленный = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                            ТаблСписПартий.Add(new
                            {
                                НомерСтрокиДокумента = lineNo,
                                НоменклатураId = строка.Номенклатура.Id,
                                Цена = строка.Цена,
                                СтатусПартииId = спТоварКупленный,
                                ПартияId = Common.ПустоеЗначение,
                                ДатаПартии = Common.min1cDate,
                                ЦенаПрод = 0m,
                                ПоставщикId = Common.ПустоеЗначение,
                                ДоговорПоставщикаId = Common.ПустоеЗначение,
                                СтавкаНДС = строка.СтавкаНДС.Id,
                                Количество = МожноОтпустить,
                                СуммаУпр = 0m,
                                СуммаБух = 0m,
                                СуммаБезНДС = 0m,
                                СуммаПрод = ОстПогСуммаПродРуб,
                                СуммаНдсПрод = ОстПогНДСПрод
                            });
                            if (!этоПередачаНаРеализацию)
                            {
                                КоличествоДвижений++;
                                j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                    lineNo, doc.Общие.Фирма.Id, строка.Номенклатура.Id, спТоварКупленный, Common.ПустоеЗначение, Common.min1cDate, 0,
                                    МожноОтпустить, 0, 0, 0, doc.КодОперации.Key, ОстПогСуммаПродРуб, 0
                                    );
                            }
                        }

                        if (!этоПередачаНаРеализацию)
                        {
                            var РегистрЗаменыНоменклатуры_Остатки = await _регистрЗаменаНоменклатуры.ПолучитьОстаткиAsync(
                                doc.Общие.ДатаДок,
                                doc.Общие.IdDoc,
                                false,
                                doc.Общие.Фирма.Id,
                                списокТМЦ
                                );
                            МожноОтпустить = КолВо;
                            foreach (var r in РегистрЗаменыНоменклатуры_Остатки)
                            {
                                var КолСписания = Math.Max(Math.Min(МожноОтпустить, r.Количество), 0);
                                if (КолСписания > 0)
                                {
                                    КоличествоДвижений++;
                                    j.Rf12351 = await _регистрЗаменаНоменклатуры.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                        doc.Общие.Фирма.Id, r.НоменклатураБухId, r.НоменклатураОБId, КолСписания
                                        );
                                    МожноОтпустить = МожноОтпустить - КолСписания;
                                }
                                if (МожноОтпустить == 0)
                                    break;
                            }
                        }
                    }
                    foreach (var строка in doc.ТабличнаяЧасть.Where(x => x.Номенклатура.ЭтоУслуга))
                    {
                        lineNo++;
                        var спУслуга = Common.GetСтатусПартииId("Услуга");
                        ТаблСписПартий.Add(new
                        {
                            НомерСтрокиДокумента = lineNo,
                            НоменклатураId = строка.Номенклатура.Id,
                            Цена = строка.Цена,
                            СтатусПартииId = спУслуга,
                            ПартияId = Common.ПустоеЗначение,
                            ДатаПартии = Common.min1cDate,
                            ЦенаПрод = 0m,
                            ПоставщикId = Common.ПустоеЗначение,
                            ДоговорПоставщикаId = Common.ПустоеЗначение,
                            СтавкаНДС = строка.СтавкаНДС.Id,
                            Количество = 1m,
                            СуммаУпр = 0m,
                            СуммаБух = 0m,
                            СуммаБезНДС = 0m,
                            СуммаПрод = строка.Сумма,
                            СуммаНдсПрод = строка.СуммаНДС
                        });
                        if (!этоПередачаНаРеализацию)
                        {
                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                lineNo, doc.Общие.Фирма.Id, строка.Номенклатура.Id, спУслуга, Common.ПустоеЗначение, Common.min1cDate, 0,
                                0, 0, 0, 0, doc.КодОперации.Key, строка.Сумма, строка.Сумма
                                );
                        }
                    }
                    foreach (var r in ТаблСписПартий)
                    {
                        if (этоПередачаНаРеализацию)
                        {
                            КоличествоДвижений++;
                            j.Rf351 = await _регистрПартииОтданные.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                                r.НомерСтрокиДокумента, doc.Общие.Фирма.Id, doc.Договор.Id, r.НоменклатураId, r.СтатусПартииId, r.ПартияId, ДокПередачиId13,
                                r.Количество, r.СуммаУпр, r.СуммаБух, r.СуммаБезНДС, r.СуммаПрод, doc.КодОперации.Key, 0);
                        }
                        else
                        {
                            КоличествоДвижений++;
                            j.Rf2351 = await _регистрПродажи.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений,
                                doc.Общие.Фирма.Id,
                                doc.Контрагент.Id,
                                r.ПоставщикId,
                                r.НоменклатураId,
                                doc.Склад.Id,
                                r.СуммаУпр,
                                r.СуммаПрод,
                                r.Количество,
                                0, 0, 0,
                                r.СуммаБезНДС,
                                0
                                );
                            if (doc.Наборы != null && (doc.Наборы.Count > 0))
                            {
                                КоличествоДвижений++;
                                j.Rf9596 = await _регистрПрямыеПродажи.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений,
                                    doc.Общие.Фирма.Id,
                                    doc.Контрагент.Id,
                                    Common.ПустоеЗначение,
                                    r.НоменклатураId,
                                    (doc.Контрагент.Менеджер != null ? doc.Контрагент.Менеджер.Id : Common.ПустоеЗначение),
                                    doc.КодОперации.Key,
                                    "I", //место продажи
                                    doc.Склад.Id,
                                    r.СуммаУпр,
                                    r.СуммаПрод,
                                    r.Количество,
                                    0, 0, 0);
                            }
                        }
                    }
                    if (!этоПередачаНаРеализацию)
                    {
                        var GrТаблСписПартий = from t in ТаблСписПартий
                                               group t by new { t.СтатусПартииId, t.СтавкаНДС, t.ДоговорПоставщикаId } into gr
                                               select new
                                               {
                                                   СтатусПартииId = gr.Key.СтатусПартииId,
                                                   СтавкаНДС = gr.Key.СтавкаНДС,
                                                   ДоговорПоставщикаId = gr.Key.ДоговорПоставщикаId,
                                                   СуммаПрод = gr.Sum(x => x.СуммаПрод),
                                                   НдсПрод = gr.Sum(x => x.СуммаНдсПрод),
                                                   СуммаБезНдс = gr.Sum(x => x.СуммаБезНДС)
                                               };
                        foreach (var r in GrТаблСписПартий)
                        {
                            КоличествоДвижений++;
                            j.Rf4335 = await _регистрПокупатели.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                                doc.Общие.Фирма.Id, doc.Договор.Id, ВидДолга(r.СтатусПартииId), doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc,
                                r.СуммаБезНдс, r.СуммаПрод, doc.КодОперации.Key, r.ДоговорПоставщикаId, Common.ПустоеЗначениеИд13);

                            КоличествоДвижений++;
                            j.Rf4343 = await _регистрКнигаПродаж.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                                doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc,
                                r.СтавкаНДС,
                                r.СтатусПартииId,
                                r.НдсПрод,
                                r.СуммаПрод,
                                doc.КодОперации.Key,
                                Common.ПустоеЗначениеИд13);
                        }
                        foreach (var r in ТаблСписПартий.Where(x => x.ПартияId != Common.ПустоеЗначение))
                        {
                            КоличествоДвижений++;
                            j.Rf438 = await _регистрРеализованныйТовар.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                                doc.Общие.Фирма.Id, r.ДоговорПоставщикаId, r.НоменклатураId, r.ПартияId, doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc,
                                r.Количество, r.СуммаПрод - r.СуммаНдсПрод, 0);
                        }
                    }
                }
                if (doc.СкидКарта != null && !doc.СкидКарта.Закрыта)
                {
                    decimal ИтогоСумма = doc.ТабличнаяЧасть.Sum(x => x.Сумма) + (doc.УчитыватьНДС && !doc.СуммаВклНДС ? doc.ТабличнаяЧасть.Sum(x => x.СуммаНДС) : 0);
                    КоличествоДвижений++;
                    j.Rf8677 = await _регистрНакопСкидка.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений,
                        doc.СкидКарта.Id, ИтогоСумма);
                }

                j.Closed = 1;
                j.Actcnt = КоличествоДвижений;
                j.Ds1946 = 2;

                _context.Update(j);
                _context.РегистрацияИзмененийРаспределеннойИБ(doc.Общие.ВидДокумента10, j.Iddoc);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException db_ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = db_ex.HResult, Description = db_ex.InnerException.ToString() };
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = ex.HResult, Description = ex.Message };
            }
            return null;
        }
        public async Task<ExceptionData> ЗаписатьПровестиAsync(ФормаРеализация doc)
        {
            var result = await ЗаписатьAsync(doc);
            if (result == null)
            {
                result = await ПровестиAsync(doc);
            }
            return result;
        }
    }
}
