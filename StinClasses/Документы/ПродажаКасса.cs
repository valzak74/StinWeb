using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using StinClasses.Models;
using StinClasses.Регистры;
using StinClasses.Справочники;

namespace StinClasses.Документы
{
    public class ФормаПродажаКасса
    {
        public ExceptionData Ошибка { get; set; }
        public ОбщиеРеквизиты Общие { get; set; }
        public Склад Склад { get; set; }
        public Касса Касса { get; set; }
        public bool ОблагаетсяЕНВД { get; set; }
        public bool УчитыватьНДС { get; set; }
        public bool СуммаВклНДС { get; set; }
        public ТипЦен ТипЦен { get; set; }
        public Контрагент Контрагент { get; set; }
        public Договор Договор { get; set; }
        public Скидка Скидка { get; set; }
        public СкидКарта СкидКарта { get; set; }
        public string СпособОтгрузки { get; set; }
        public Маршрут Маршрут { get; set; }
        public decimal ВидОплаты { get; set; }
        public decimal СуммаОплаты { get; set; }
        public List<ФормаПродажаКассаТЧ> ТабличнаяЧасть { get; set; }
        public ФормаПродажаКасса()
        {
            Общие = new ОбщиеРеквизиты();
            ТабличнаяЧасть = new List<ФормаПродажаКассаТЧ>();
        }
    }
    public class ФормаПродажаКассаТЧ
    {
        public Номенклатура Номенклатура { get; set; }
        public decimal Количество { get; set; }
        public Единица Единица { get; set; }
        public decimal Цена { get; set; }
        public decimal Сумма { get; set; }
        public СтавкаНДС СтавкаНДС { get; set; }
        public decimal СуммаНДС { get; set; }
        public decimal Себестоимость { get; set; }
    }
    public interface IПродажаКасса : IДокумент
    {
        Task<ФормаПродажаКасса> ВводНаОснованииAsync(string докОснованиеId, string userId);
        Task<ExceptionData> ЗаписатьAsync(ФормаПродажаКасса doc);
        Task<ExceptionData> ПровестиAsync(ФормаПродажаКасса doc, ФормаОплатаЧерезЮКасса оплатаЧерезЮКассаDoc);
        Task<ExceptionData> ЗаписатьПровестиAsync(ФормаПродажаКасса doc, ФормаОплатаЧерезЮКасса оплатаЧерезЮКассаDoc);
    }
    public class ПродажаКасса : Документ, IПродажаКасса
    {
        private IРегистрЗаявки _регистрЗаявки;
        private IРегистрЗаказыЗаявки _регистрЗаказыЗаявки;
        private IРегистрОстаткиТМЦ _регистрОстаткиТМЦ;
        private IРегистрРезервыТМЦ _регистрРезервыТМЦ;
        private IРегистрПартииНаличие _регистрПартииНаличие;
        private IРегистрНаборНаСкладе _регистрНаборНаСкладе;
        private IРегистрПрямыеПродажи _регистрПрямыеПродажи;
        private IКасса _касса;
        private IНабор _набор;
        private IОтчетККМ _отчетККМ;
        public ПродажаКасса(StinDbContext context) : base(context)
        {
            _регистрЗаявки = new Регистр_Заявки(context);
            _регистрЗаказыЗаявки = new Регистр_ЗаказыЗаявки(context);
            _регистрОстаткиТМЦ = new Регистр_ОстаткиТМЦ(context);
            _регистрРезервыТМЦ = new Регистр_РезервыТМЦ(context);
            _регистрПартииНаличие = new Регистр_ПартииНаличие(context);
            _регистрНаборНаСкладе = new Регистр_НаборНаСкладе(context);
            _регистрПрямыеПродажи = new Регистр_ПрямыеПродажи(context);
            _касса = new КассаEntity(context);
            _набор = new Набор(context);
            _отчетККМ = new ОтчетККМ(context);
        }
        protected override void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    _регистрЗаявки.Dispose();
                    _регистрЗаказыЗаявки.Dispose();
                    _регистрОстаткиТМЦ.Dispose();
                    _регистрРезервыТМЦ.Dispose();
                    _регистрПартииНаличие.Dispose();
                    _регистрНаборНаСкладе.Dispose();
                    _регистрПрямыеПродажи.Dispose();
                    _касса.Dispose();
                    _набор.Dispose();
                    _отчетККМ.Dispose();
                }
            }
            base.Dispose(disposing);
        }
        public async Task<ФормаПродажаКасса> ВводНаОснованииAsync(string докОснованиеId, string userId)
        {
            ФормаПродажаКасса doc = new ФормаПродажаКасса();
            if (NeedToOpenPeriod())
            {
                doc.Ошибка = new ExceptionData { Description = "Период не открыт!" };
            }
            else
            {
                doc.Общие.ДокОснование = await ДокОснованиеAsync(докОснованиеId);
                doc.Общие.Автор = await _пользователь.GetUserByIdAsync(userId);
                doc.Общие.ВидДокумента10 = (int)ВидДокумента.ПродажаКасса; //9074;
                doc.Общие.ВидДокумента36 = Common.Encode36(doc.Общие.ВидДокумента10);
                doc.Общие.Фирма = doc.Общие.ДокОснование.Фирма;

                doc.Общие.ДатаДок = DateTime.Now;

                if (doc.Общие.ДокОснование.ВидДокумента10 == (int)ВидДокумента.ЗаявкаПокупателя) //Счет на оплату
                {
                    var ДокОснование = await GetФормаЗаявкаById(докОснованиеId);
                    if (ДокОснование != null)
                    {
                        doc.Общие.Комментарий = ДокОснование.Общие.Комментарий.Trim();
                        doc.Склад = ДокОснование.Склад;
                        doc.Касса = await _касса.GetYouKassaAsync();
                        doc.УчитыватьНДС = ДокОснование.УчитыватьНДС;
                        doc.СуммаВклНДС = ДокОснование.СуммаВклНДС;
                        doc.ТипЦен = ДокОснование.ТипЦен;
                        doc.Контрагент = ДокОснование.Контрагент;
                        doc.Договор = ДокОснование.Договор;
                        doc.Скидка = ДокОснование.Скидка;
                        doc.СкидКарта = ДокОснование.СкидКарта;
                        doc.СпособОтгрузки = ДокОснование.СпособОтгрузки;
                        doc.Маршрут = ДокОснование.Маршрут;
                        doc.ВидОплаты = 3;

                        var РазрешенныеФирмы = await _фирма.ПолучитьСписокРазрешенныхФирмAsync(doc.Общие.Фирма.Id);
                        var НоменклатураОснования = ДокОснование.ТабличнаяЧасть.Select(x => x.Номенклатура.Id).ToList();
                        var РегистрЗаявки_Остатки = await _регистрЗаявки.ПолучитьОстаткиAsync(
                            doc.Общие.ДатаДок,
                            doc.Общие.IdDoc,
                            false,
                            РазрешенныеФирмы,
                            doc.Договор.Id,
                            НоменклатураОснования,
                            ДокОснование.Общие.IdDoc
                            );
                        if (РегистрЗаявки_Остатки != null && РегистрЗаявки_Остатки.Count > 0)
                        {
                            var РегистрОстаткиТМЦ_Остатки = await _регистрОстаткиТМЦ.ПолучитьОстаткиAsync(
                                doc.Общие.ДатаДок,
                                doc.Общие.IdDoc,
                                false,
                                РазрешенныеФирмы,
                                НоменклатураОснования,
                                doc.Склад.Id
                                );
                            if (РегистрОстаткиТМЦ_Остатки != null && РегистрОстаткиТМЦ_Остатки.Count > 0)
                            {
                                var РегистрРезервыТМЦ_Остатки = await _регистрРезервыТМЦ.ПолучитьОстаткиAsync(
                                    doc.Общие.ДатаДок,
                                    doc.Общие.IdDoc,
                                    false,
                                    РазрешенныеФирмы,
                                    doc.Договор.Id,
                                    НоменклатураОснования,
                                    new List<string> { doc.Склад.Id }
                                    );
                                var РегистрПартииНаличие_Остатки = await _регистрПартииНаличие.ПолучитьОстаткиAsync(
                                    doc.Общие.ДатаДок,
                                    doc.Общие.IdDoc,
                                    false,
                                    РазрешенныеФирмы,
                                    НоменклатураОснования,
                                    null,
                                    null
                                    );
                                foreach (var row in ДокОснование.ТабличнаяЧасть)
                                {
                                    string НоменклатураId = row.Номенклатура.Id;
                                    var ОстатокВЗаявках = РегистрЗаявки_Остатки
                                        .Where(x => x.НоменклатураId == НоменклатураId)
                                        .Sum(x => x.Количество);
                                    if (ОстатокВЗаявках > 0)
                                    {
                                        var ОстатокТМЦ = РегистрОстаткиТМЦ_Остатки
                                            .Where(x => x.НоменклатураId == НоменклатураId && x.СкладId == ДокОснование.Склад.Id)
                                            .Sum(x => x.Количество);
                                        var РезервТМЦ = РегистрРезервыТМЦ_Остатки
                                            .Where(x => x.НоменклатураId == НоменклатураId && x.СкладId == ДокОснование.Склад.Id && x.ЗаявкаId != ДокОснование.Общие.IdDoc)
                                            .Sum(x => x.Количество);
                                        var Себестоимость = (from r in РегистрПартииНаличие_Остатки
                                                             where r.НоменклатураId == НоменклатураId
                                                             group r by r.НоменклатураId into gr
                                                             select gr.Sum(x => x.Количество) != 0 ? gr.Sum(x => x.СуммаУпр) / gr.Sum(x => x.Количество) : 0)
                                                            .FirstOrDefault();
                                        var МожноОтпустить = Math.Min(ОстатокВЗаявках, ОстатокТМЦ - РезервТМЦ);
                                        if (МожноОтпустить > 0)
                                        {
                                            var продажаКассаСтрока = new ФормаПродажаКассаТЧ
                                            {
                                                Номенклатура = row.Номенклатура,
                                                Единица = row.Единица,
                                                Количество = Math.Min(row.Количество, МожноОтпустить / row.Единица.Коэффициент),
                                                Цена = row.Цена,
                                                СтавкаНДС = row.СтавкаНДС,
                                            };
                                            продажаКассаСтрока.Сумма = row.Сумма * продажаКассаСтрока.Количество / row.Количество;
                                            if (doc.УчитыватьНДС && doc.СуммаВклНДС)
                                                продажаКассаСтрока.СуммаНДС = продажаКассаСтрока.Сумма * (продажаКассаСтрока.СтавкаНДС.Процент / (100 + продажаКассаСтрока.СтавкаНДС.Процент));
                                            else if (doc.УчитыватьНДС && !doc.СуммаВклНДС)
                                                продажаКассаСтрока.СуммаНДС = продажаКассаСтрока.Сумма * (продажаКассаСтрока.СтавкаНДС.Процент / 100);
                                            продажаКассаСтрока.Себестоимость = Себестоимость * продажаКассаСтрока.Единица.Коэффициент * продажаКассаСтрока.Количество;
                                            doc.ТабличнаяЧасть.Add(продажаКассаСтрока);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (doc.Общие.ДокОснование.ВидДокумента10 == (int)ВидДокумента.Набор)
                {
                    var ДокОснование = await _набор.GetФормаНаборById(докОснованиеId);
                    var Заявка = ДокОснование.Общие.ДокОснование != null ? await GetФормаЗаявкаById(ДокОснование.Общие.ДокОснование.IdDoc) : null;
                    if (ДокОснование != null)
                    {
                        doc.Общие.Комментарий = ДокОснование.Общие.Комментарий.Trim();
                        doc.Склад = ДокОснование.Склад;
                        doc.Касса = await _касса.GetYouKassaAsync();
                        doc.УчитыватьНДС = await _фирма.ПолучитьУчитыватьНДСAsync(doc.Общие.Фирма.Id) == 1;
                        doc.СуммаВклНДС = true;
                        doc.ТипЦен = Заявка != null ? Заявка.ТипЦен : null;
                        doc.Контрагент = ДокОснование.Контрагент;
                        doc.Договор = ДокОснование.Договор;
                        doc.Скидка = Заявка != null ? Заявка.Скидка : null;
                        doc.СкидКарта = ДокОснование.СкидКарта;
                        doc.СпособОтгрузки = ДокОснование.СпособОтгрузки;
                        doc.Маршрут = ДокОснование.Маршрут;
                        doc.ВидОплаты = 3;

                        var РазрешенныеФирмы = await _фирма.ПолучитьСписокРазрешенныхФирмAsync(doc.Общие.Фирма.Id);
                        var НоменклатураОснования = ДокОснование.ТабличнаяЧасть.Select(x => x.Номенклатура.Id).ToList();
                        var РегистрНаборНаСкладе_Остатки = await _регистрНаборНаСкладе.ПолучитьОстаткиAsync(
                            doc.Общие.ДатаДок,
                            doc.Общие.IdDoc,
                            false,
                            РазрешенныеФирмы,
                            doc.Склад.Id,
                            doc.Договор.Id,
                            НоменклатураОснования,
                            doc.Общие.ДокОснование.IdDoc
                            );
                        var РегистрПартииНаличие_Остатки = await _регистрПартииНаличие.ПолучитьОстаткиAsync(
                            doc.Общие.ДатаДок,
                            doc.Общие.IdDoc,
                            false,
                            РазрешенныеФирмы,
                            НоменклатураОснования,
                            null,
                            null
                            );
                        foreach (var row in ДокОснование.ТабличнаяЧасть)
                        {
                            var ОстатокВНаборе = РегистрНаборНаСкладе_Остатки
                                .Where(x => x.НоменклатураId == row.Номенклатура.Id)
                                .Sum(x => x.Количество);
                            if (ОстатокВНаборе > 0)
                            {
                                var МожноОтпустить = Math.Min(ОстатокВНаборе / row.Единица.Коэффициент, row.Количество);
                                if (МожноОтпустить > 0)
                                {
                                    var продажаКассаСтрока = new ФормаПродажаКассаТЧ
                                    {
                                        Номенклатура = row.Номенклатура,
                                        Единица = row.Единица,
                                        Количество = МожноОтпустить,
                                        Цена = row.Цена,
                                        СтавкаНДС = await _номенклатура.GetСтавкаНДСAsync(row.Номенклатура.Id),
                                    };
                                    продажаКассаСтрока.Сумма = row.Сумма * продажаКассаСтрока.Количество / row.Количество;
                                    if (doc.УчитыватьНДС && doc.СуммаВклНДС)
                                        продажаКассаСтрока.СуммаНДС = продажаКассаСтрока.Сумма * (продажаКассаСтрока.СтавкаНДС.Процент / (100 + продажаКассаСтрока.СтавкаНДС.Процент));
                                    else if (doc.УчитыватьНДС && !doc.СуммаВклНДС)
                                        продажаКассаСтрока.СуммаНДС = продажаКассаСтрока.Сумма * (продажаКассаСтрока.СтавкаНДС.Процент / 100);
                                    var Себестоимость = (from r in РегистрПартииНаличие_Остатки
                                                         where r.НоменклатураId == row.Номенклатура.Id
                                                         group r by r.НоменклатураId into gr
                                                         select gr.Sum(x => x.Количество) != 0 ? gr.Sum(x => x.СуммаУпр) / gr.Sum(x => x.Количество) : 0)
                                                        .FirstOrDefault();
                                    продажаКассаСтрока.Себестоимость = Себестоимость * продажаКассаСтрока.Единица.Коэффициент * продажаКассаСтрока.Количество;
                                    doc.ТабличнаяЧасть.Add(продажаКассаСтрока);
                                }
                            }
                        }
                    }
                }
                doc.СуммаОплаты = doc.ТабличнаяЧасть.Sum(x => x.Сумма);
                if (doc.ТабличнаяЧасть.Count == 0)
                {
                    doc.Ошибка = new ExceptionData { Description = "Все заказанные товары либо получены, либо их нет в наличии!" };
                }
            }
            if (doc.Ошибка == null || doc.Ошибка.Skip)
                doc.Общие.НомерДок = await LockDocNoAsync(doc.Общие.Автор.Id, "9074", 10, doc.Общие.Фирма.Id);
            return doc;
        }
        public async Task<ExceptionData> ЗаписатьAsync(ФормаПродажаКасса doc)
        {
            try
            {
                await UnLockDocNoAsync(doc.Общие.ВидДокумента10.ToString(), doc.Общие.НомерДок);
                _1sjourn j = GetEntityJourn(_context, 4588, doc.Общие.ВидДокумента10, null, doc.Общие.Наименование,
                    doc.Общие.НомерДок, doc.Общие.ДатаДок,
                    doc.Общие.Фирма.Id,
                    doc.Общие.Автор.Id,
                    doc.Склад.Наименование,
                    doc.Контрагент.Наименование);

                doc.Общие.IdDoc = j.Iddoc;
                Dh9074 docHeader = new Dh9074
                {
                    Iddoc = j.Iddoc,
                    Sp9041 = doc.Склад != null ? doc.Склад.Id : Common.ПустоеЗначение,
                    Sp9042 = doc.Касса != null ? doc.Касса.Id : Common.ПустоеЗначение,
                    Sp9043 = Common.ВалютаРубль,
                    Sp9044 = 1,
                    Sp9045 = doc.ОблагаетсяЕНВД ? 1 : 0,
                    Sp9046 = doc.УчитыватьНДС ? 1 : 0,
                    Sp9047 = doc.СуммаВклНДС ? 1 : 0,
                    Sp9048 = 0,
                    Sp9049 = 0,
                    Sp9050 = doc.ТипЦен != null ? doc.ТипЦен.Id : Common.ПустоеЗначение,
                    Sp9051 = doc.Общие.ДокОснование != null ? doc.Общие.ДокОснование.Значение : Common.ПустоеЗначениеИд13,
                    Sp9052 = doc.Контрагент != null ? doc.Контрагент.Id : Common.ПустоеЗначение,
                    Sp9053 = "     2S  ", //поступления от покупателей
                    Sp9054 = doc.Договор != null ? doc.Договор.Id : Common.ПустоеЗначение,
                    Sp9055 = doc.Скидка != null ? doc.Скидка.Id : Common.ПустоеЗначение,
                    Sp9056 = "",
                    Sp9057 = 0,
                    Sp9058 = doc.СкидКарта != null ? doc.СкидКарта.Id : Common.ПустоеЗначение,
                    Sp9059 = 0,
                    Sp9060 = 0,
                    Sp9061 = "",
                    Sp10385 = Common.СпособыОтгрузки.Where(x => x.Value == doc.СпособОтгрузки).Select(y => y.Key).FirstOrDefault(),
                    Sp11571 = doc.Маршрут != null ? doc.Маршрут.Code : "",
                    Sp11572 = doc.Маршрут != null ? doc.Маршрут.Наименование : "",
                    Sp11678 = doc.СуммаОплаты,
                    Sp12899 = 0,
                    Sp13769 = doc.ВидОплаты,
                    Sp660 = doc.Общие.Комментарий != null ? doc.Общие.Комментарий : ""
                };
                await _context.Dh9074s.AddAsync(docHeader);

                if (doc.ТабличнаяЧасть != null && doc.ТабличнаяЧасть.Count > 0)
                {
                    short lineNo = 1;
                    foreach (var строка in doc.ТабличнаяЧасть)
                    {
                        Dt9074 docRow = new Dt9074
                        {
                            Iddoc = j.Iddoc,
                            Lineno = lineNo++,
                            Sp9062 = строка.Номенклатура != null ? строка.Номенклатура.Id : Common.ПустоеЗначение,
                            Sp9063 = строка.Количество,
                            Sp9064 = строка.Единица != null ? строка.Единица.Id : Common.ПустоеЗначение,
                            Sp9065 = строка.Единица != null ? строка.Единица.Коэффициент : 1,
                            Sp9066 = строка.Цена,
                            Sp9067 = строка.Сумма,
                            Sp9068 = строка.СтавкаНДС != null ? строка.СтавкаНДС.Id : "    I9   ", //Без НДС
                            Sp9069 = строка.СуммаНДС,
                            Sp9070 = "     1   ",
                            Sp9071 = 0,
                            Sp9072 = Common.ПустоеЗначение,
                            Sp9544 = строка.Себестоимость,
                        };
                        await _context.Dt9074s.AddAsync(docRow);
                    }
                }
                _context.РегистрацияИзмененийРаспределеннойИБ(doc.Общие.ВидДокумента10, j.Iddoc);
                await _context.SaveChangesAsync();

                await ОбновитьTotals(doc.Общие.ВидДокумента10, j.Iddoc);
                if (doc.Общие.ДокОснование != null)
                    await ОбновитьПодчиненныеДокументы(doc.Общие.ДокОснование.Значение, j.DateTimeIddoc, j.Iddoc);
                //склад
                await ОбновитьГрафыОтбора(4747, Common.Encode36(55).PadLeft(4) + doc.Склад.Id, j.DateTimeIddoc, j.Iddoc);
                //контрагент
                await ОбновитьГрафыОтбора(862, Common.Encode36(172).PadLeft(4) + doc.Контрагент.Id, j.DateTimeIddoc, j.Iddoc);
            }
            catch (DbUpdateException db_ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = db_ex.HResult, Description = db_ex.InnerException.ToString() };
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = ex.HResult, Description = ex.Message };
            }
            return null;
        }
        public async Task<ExceptionData> ПровестиAsync(ФормаПродажаКасса doc, ФормаОплатаЧерезЮКасса оплатаЧерезЮКассаDoc)
        {
            try
            {
                _1sjourn j = await _context._1sjourns.FirstOrDefaultAsync(x => x.Iddoc == doc.Общие.IdDoc);
                if (j == null)
                {
                    if (_context.Database.CurrentTransaction != null)
                        _context.Database.CurrentTransaction.Rollback();
                    return new ExceptionData { Description = "Не обнаружена запись журнала." };
                }
                var СписокТМЦ = doc.ТабличнаяЧасть.Select(x => x.Номенклатура.Id).ToList();
                var СводнаяТаблица = Enumerable.Repeat(new
                {
                    ФирмаId = "",
                    ПодСкладId = "",
                    Комиссия = false,
                    НоменклатураId = "",
                    ЕдиницаId = "",
                    Коэффициент = 0.000m,
                    СтавкаНДС = new СтавкаНДС(),
                    Количество = 0.000m,
                    Цена = 0.00m,
                    Сумма = 0.00m
                }, 0).ToList();
                var РазрешенныеФирмы = await _фирма.ПолучитьСписокРазрешенныхФирмAsync(doc.Общие.Фирма.Id);
                var ПодСклады = await _склад.ПолучитьПодСклады(doc.Склад.Id).ToListAsync();
                int КоличествоДвижений = 0;
                bool ДвиженияРезервыТМЦ = false;
                bool ДвиженияЗаявки = false;
                bool ДвиженияЗаказыЗаявки = false;
                bool ДвиженияПрямыеПродажи = false;
                DateTime startOfMonth = new DateTime(doc.Общие.ДатаДок.Year, doc.Общие.ДатаДок.Month, 1);
                if (doc.Общие.ДокОснование.ВидДокумента10 == (int)ВидДокумента.ЗаявкаПокупателя) //ЗаявкаПокупателя
                {
                    var ЗаявкаId = await НайтиДокументВДеревеAsync(doc.Общие.IdDoc, 2457);
                    var РегистрЗаявки_Остатки = await _регистрЗаявки.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        РазрешенныеФирмы,
                        doc.Договор.Id,
                        СписокТМЦ,
                        ЗаявкаId
                        );
                    var РегистрЗаказыЗаявки_Остатки = await _регистрЗаказыЗаявки.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        null,
                        null,
                        СписокТМЦ
                        );
                    var РегистрОстаткиТМЦ_Остатки = await _регистрОстаткиТМЦ.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        РазрешенныеФирмы,
                        СписокТМЦ,
                        doc.Склад.Id
                        );
                    var РегистрРезервыТМЦ_Остатки = await _регистрРезервыТМЦ.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        РазрешенныеФирмы,
                        doc.Договор.Id,
                        СписокТМЦ,
                        new List<string> { doc.Склад.Id },
                        ЗаявкаId
                        );
                    foreach (var строка in doc.ТабличнаяЧасть)
                    {
                        string НоменклатураId = строка.Номенклатура.Id;
                        decimal КолВо = строка.Количество * строка.Единица.Коэффициент;
                        var Резервы = РегистрРезервыТМЦ_Остатки
                            .Where(x => x.НоменклатураId == НоменклатураId);
                        var Заявки = РегистрЗаявки_Остатки
                            .Where(x => x.НоменклатураId == НоменклатураId);
                        var ЗаказыЗаявки = РегистрЗаказыЗаявки_Остатки
                            .Where(x => x.НоменклатураId == НоменклатураId);
                        foreach (var r in Резервы)
                        {
                            if (КолВо <= 0)
                                break;
                            var Погасить = Math.Max(Math.Min(КолВо, r.Количество), 0);
                            if (Погасить > 0)
                            {
                                КолВо = КолВо - Погасить;
                                ДвиженияРезервыТМЦ = true;
                                КоличествоДвижений++;
                                await _регистрРезервыТМЦ.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                    r.ФирмаId, r.НоменклатураId, r.СкладId, r.ДоговорId, r.ЗаявкаId, Погасить);
                                foreach (var rz in Заявки)
                                {
                                    if (Погасить <= 0)
                                        break;
                                    var ПогаситьЗаявки = Math.Max(Math.Min(Погасить, rz.Количество), 0);
                                    if (ПогаситьЗаявки > 0)
                                    {
                                        Погасить = Погасить - ПогаситьЗаявки;
                                        ДвиженияЗаявки = true;
                                        КоличествоДвижений++;
                                        await _регистрЗаявки.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                           rz.ФирмаId, rz.НоменклатураId, rz.ДоговорId, rz.ЗаявкаId,
                                           ПогаситьЗаявки,
                                           rz.Стоимость * ПогаситьЗаявки / rz.Количество);
                                        foreach (var rzz in ЗаказыЗаявки)
                                        {
                                            if (ПогаситьЗаявки <= 0)
                                                break;
                                            var ПогаситьЗаказыЗаявки = Math.Max(Math.Min(ПогаситьЗаявки, rzz.Количество), 0);
                                            if (ПогаситьЗаказыЗаявки > 0)
                                            {
                                                ПогаситьЗаявки = ПогаситьЗаявки - ПогаситьЗаказыЗаявки;
                                                ДвиженияЗаказыЗаявки = true;
                                                КоличествоДвижений++;
                                                await _регистрЗаказыЗаявки.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                                    rzz.НоменклатураId, rzz.ЗаказId, rzz.ЗаявкаId, rzz.НаСогласование, ПогаситьЗаявки);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //распределение товара
                    foreach (var строка in doc.ТабличнаяЧасть)
                    {
                        string НоменклатураId = строка.Номенклатура.Id;
                        decimal ОстатокСуммы = строка.Сумма;
                        decimal Отпустить = строка.Количество * строка.Единица.Коэффициент;
                        decimal РасчетнаяЦена = ОстатокСуммы / Отпустить;
                        foreach (var фирма in РазрешенныеФирмы)
                        {
                            var Зарезервировано = РегистрРезервыТМЦ_Остатки
                                .Where(x => x.ФирмаId == фирма && x.НоменклатураId == НоменклатураId && x.СкладId == doc.Склад.Id && x.ДоговорId == doc.Договор.Id)
                                .Sum(x => x.Количество);
                            Зарезервировано = Math.Min(Отпустить, Зарезервировано);
                            if (Зарезервировано > 0)
                            {
                                foreach (var подСклад in ПодСклады)
                                {
                                    var ОстатокПодСклада = РегистрОстаткиТМЦ_Остатки
                                        .Where(x => x.ФирмаId == фирма && x.НоменклатураId == НоменклатураId && x.СкладId == doc.Склад.Id && x.ПодСкладId == подСклад.Id)
                                        .Sum(x => x.Количество);
                                    var МожноОтпустить = Math.Max(Math.Min(Зарезервировано, ОстатокПодСклада), 0);
                                    if (МожноОтпустить == 0)
                                        break;
                                    var стр = new
                                    {
                                        ФирмаId = фирма,
                                        ПодСкладId = подСклад.Id,
                                        Комиссия = await _номенклатура.IsОсновноеСвойствоКомиссияAsync(НоменклатураId) && фирма == await _фирма.ПолучитьФирмуДляОптаAsync(),
                                        НоменклатураId = НоменклатураId,
                                        ЕдиницаId = строка.Единица.Id,
                                        Коэффициент = строка.Единица.Коэффициент,
                                        СтавкаНДС = строка.СтавкаНДС,
                                        Количество = МожноОтпустить,
                                        Цена = строка.Цена,
                                        Сумма = МожноОтпустить == Отпустить ? ОстатокСуммы : (РасчетнаяЦена * МожноОтпустить)
                                    };
                                    ОстатокСуммы = ОстатокСуммы - стр.Сумма;
                                    Отпустить = Отпустить - МожноОтпустить;
                                    Зарезервировано = Зарезервировано - МожноОтпустить;
                                    СводнаяТаблица.Add(стр);
                                    if (Зарезервировано <= 0)
                                        break;
                                }
                            }
                            if (Отпустить <= 0)
                                break;
                        }
                        if (Отпустить > 0)
                        {
                            foreach (var фирма in РазрешенныеФирмы)
                            {
                                var СвободныйОстаток = РегистрОстаткиТМЦ_Остатки
                                    .Where(x => x.ФирмаId == фирма && x.НоменклатураId == НоменклатураId && x.СкладId == doc.Склад.Id)
                                    .Sum(x => x.Количество) -
                                        РегистрРезервыТМЦ_Остатки
                                        .Where(x => x.ФирмаId == фирма && x.НоменклатураId == НоменклатураId && x.СкладId == doc.Склад.Id)
                                        .Sum(x => x.Количество);
                                СвободныйОстаток = Math.Min(Отпустить, СвободныйОстаток);
                                if (СвободныйОстаток > 0)
                                {
                                    foreach (var подСклад in ПодСклады)
                                    {
                                        var ОстатокПодСклада = РегистрОстаткиТМЦ_Остатки
                                            .Where(x => x.ФирмаId == фирма && x.НоменклатураId == НоменклатураId && x.СкладId == doc.Склад.Id && x.ПодСкладId == подСклад.Id)
                                            .Sum(x => x.Количество) -
                                                СводнаяТаблица.Where(x => x.ФирмаId == фирма && x.НоменклатураId == НоменклатураId && x.ПодСкладId == подСклад.Id)
                                                .Sum(x => x.Количество);
                                        var МожноОтпустить = Math.Max(Math.Min(СвободныйОстаток, ОстатокПодСклада), 0);
                                        if (МожноОтпустить == 0)
                                            break;
                                        var стр = new
                                        {
                                            ФирмаId = фирма,
                                            ПодСкладId = подСклад.Id,
                                            Комиссия = await _номенклатура.IsОсновноеСвойствоКомиссияAsync(НоменклатураId) && фирма == await _фирма.ПолучитьФирмуДляОптаAsync(),
                                            НоменклатураId = НоменклатураId,
                                            ЕдиницаId = строка.Единица.Id,
                                            Коэффициент = строка.Единица.Коэффициент,
                                            СтавкаНДС = строка.СтавкаНДС,
                                            Количество = МожноОтпустить,
                                            Цена = строка.Цена,
                                            Сумма = МожноОтпустить == Отпустить ? ОстатокСуммы : (РасчетнаяЦена * МожноОтпустить)
                                        };
                                        ОстатокСуммы = ОстатокСуммы - стр.Сумма;
                                        Отпустить = Отпустить - МожноОтпустить;
                                        СвободныйОстаток = СвободныйОстаток - МожноОтпустить;
                                        СводнаяТаблица.Add(стр);
                                        if (СвободныйОстаток <= 0)
                                            break;
                                    }
                                }
                                if (Отпустить <= 0)
                                    break;
                            }
                        }
                        if (Отпустить > 0)
                            return new ExceptionData
                            {
                                Description = "Нет свободного количества (" +
                                    строка.Номенклатура.Артикул + ") " + строка.Номенклатура.Наименование
                            };
                        if (ОстатокСуммы > 0)
                        {
                            var стр = СводнаяТаблица.LastOrDefault();
                            if (стр != null)
                            {
                                var стрNew = new
                                {
                                    ФирмаId = стр.ФирмаId,
                                    ПодСкладId = стр.ПодСкладId,
                                    Комиссия = стр.Комиссия,
                                    НоменклатураId = стр.НоменклатураId,
                                    ЕдиницаId = стр.ЕдиницаId,
                                    Коэффициент = стр.Коэффициент,
                                    СтавкаНДС = стр.СтавкаНДС,
                                    Количество = стр.Количество,
                                    Цена = стр.Цена,
                                    Сумма = стр.Сумма + ОстатокСуммы
                                };
                                СводнаяТаблица.Remove(стр);
                                СводнаяТаблица.Add(стрNew);
                            }
                        }
                    }
                }
                else if (doc.Общие.ДокОснование.ВидДокумента10 == (int)ВидДокумента.Набор) //Набор
                {
                    var РегистрНаборНаСкладе_Остатки = await _регистрНаборНаСкладе.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        РазрешенныеФирмы,
                        doc.Склад.Id,
                        doc.Договор.Id,
                        СписокТМЦ,
                        doc.Общие.ДокОснование.IdDoc
                        );
                    //распределение товара
                    foreach (var строка in doc.ТабличнаяЧасть)
                    {
                        string НоменклатураId = строка.Номенклатура.Id;
                        decimal ОстатокСуммы = строка.Сумма;
                        decimal Отпустить = строка.Количество * строка.Единица.Коэффициент;
                        decimal РасчетнаяЦена = ОстатокСуммы / Отпустить;

                        var Распределение = РегистрНаборНаСкладе_Остатки
                            .Where(x => x.НоменклатураId == НоменклатураId && x.СкладId == doc.Склад.Id && x.ДоговорId == doc.Договор.Id);
                        foreach (var r in Распределение)
                        {
                            var МожноОтпустить = Math.Max(Math.Min(r.Количество, Отпустить), 0);
                            if (МожноОтпустить > 0)
                            {
                                var стр = new
                                {
                                    ФирмаId = r.ФирмаId,
                                    ПодСкладId = r.ПодСкладId,
                                    Комиссия = await _номенклатура.IsОсновноеСвойствоКомиссияAsync(НоменклатураId) && r.ФирмаId == await _фирма.ПолучитьФирмуДляОптаAsync(),
                                    НоменклатураId = НоменклатураId,
                                    ЕдиницаId = строка.Единица.Id,
                                    Коэффициент = строка.Единица.Коэффициент,
                                    СтавкаНДС = строка.СтавкаНДС,
                                    Количество = МожноОтпустить,
                                    Цена = строка.Цена,
                                    Сумма = МожноОтпустить == Отпустить ? ОстатокСуммы : (РасчетнаяЦена * МожноОтпустить)
                                };
                                ОстатокСуммы = ОстатокСуммы - стр.Сумма;
                                Отпустить = Отпустить - МожноОтпустить;
                                СводнаяТаблица.Add(стр);
                            }
                            if (Отпустить <= 0)
                                break;
                        }
                        if (Отпустить > 0)
                            return new ExceptionData
                            {
                                Description = "Нет свободного количества (" +
                                    строка.Номенклатура.Артикул + ") " + строка.Номенклатура.Наименование
                            };
                        if (ОстатокСуммы > 0)
                        {
                            var стр = СводнаяТаблица.LastOrDefault();
                            if (стр != null)
                            {
                                var стрNew = new
                                {
                                    ФирмаId = стр.ФирмаId,
                                    ПодСкладId = стр.ПодСкладId,
                                    Комиссия = стр.Комиссия,
                                    НоменклатураId = стр.НоменклатураId,
                                    ЕдиницаId = стр.ЕдиницаId,
                                    Коэффициент = стр.Коэффициент,
                                    СтавкаНДС = стр.СтавкаНДС,
                                    Количество = стр.Количество,
                                    Цена = стр.Цена,
                                    Сумма = стр.Сумма + ОстатокСуммы
                                };
                                СводнаяТаблица.Remove(стр);
                                СводнаяТаблица.Add(стрNew);
                            }
                        }
                    }
                }
                foreach (var строка in doc.ТабличнаяЧасть)
                {
                    ДвиженияПрямыеПродажи = true;
                    КоличествоДвижений++;
                    await _регистрПрямыеПродажи.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений,
                        doc.Общие.Фирма.Id,
                        doc.Контрагент.Id,
                        Common.ПустоеЗначение,
                        строка.Номенклатура.Id,
                        (doc.Контрагент.Менеджер != null ? doc.Контрагент.Менеджер.Id : Common.ПустоеЗначение),
                        Common.КодОперации.Where(x => x.Value == "Реализация (купля-продажа)").Select(x => x.Key).FirstOrDefault(),
                        "I", //место продажи
                        doc.Склад.Id,
                        строка.Себестоимость,
                        строка.Сумма + (doc.СуммаВклНДС ? 0 : строка.СуммаНДС),
                        строка.Количество * строка.Единица.Коэффициент,
                        0, 0, 0);
                }
                if (doc.Маршрут != null && !string.IsNullOrEmpty(doc.Маршрут.Id) && !string.IsNullOrEmpty(doc.Маршрут.Наименование))
                {
                    КоличествоДвижений++;
                    _context.ИзменитьПериодическиеРеквизиты(doc.Маршрут.Id, 11552, j.Iddoc, doc.Общие.ДатаДок, Common.Encode36(doc.Общие.ВидДокумента10).PadLeft(4) + j.Iddoc, КоличествоДвижений);
                    КоличествоДвижений++;
                    _context.ИзменитьПериодическиеРеквизиты(doc.Маршрут.Id, 11553, j.Iddoc, doc.Общие.ДатаДок, doc.Маршрут.Наименование, КоличествоДвижений);
                }

                j.Closed = 1;
                j.Actcnt = КоличествоДвижений;
                j.Rf4480 = ДвиженияРезервыТМЦ;
                j.Rf4674 = ДвиженияЗаявки;
                j.Rf4667 = ДвиженияЗаказыЗаявки;
                j.Rf9596 = ДвиженияПрямыеПродажи;
                j.Ds1946 = 2;

                _context.Update(j);
                _context.РегистрацияИзмененийРаспределеннойИБ(doc.Общие.ВидДокумента10, j.Iddoc);
                await _context.SaveChangesAsync();

                await ОбновитьВремяТА(j.Iddoc, j.DateTimeIddoc);
                await ОбновитьПоследовательность(j.DateTimeIddoc);
                await ОбновитьСетевуюАктивность();

                var ДанныеРаспределения = from t in СводнаяТаблица
                                          group t by new { t.Комиссия, t.ФирмаId, t.ПодСкладId, t.НоменклатураId, t.ЕдиницаId, t.Коэффициент, t.СтавкаНДС, t.Цена } into gr
                                          select new
                                          {
                                              Комиссия = gr.Key.Комиссия,
                                              ФирмаId = gr.Key.ФирмаId,
                                              ПодСкладId = gr.Key.ПодСкладId,
                                              НоменклатураId = gr.Key.НоменклатураId,
                                              ЕдиницаId = gr.Key.ЕдиницаId,
                                              Коэффициент = gr.Key.Коэффициент,
                                              СтавкаНДС = gr.Key.СтавкаНДС,
                                              Цена = gr.Key.Цена,
                                              Количество = gr.Sum(x => x.Количество),
                                              Сумма = gr.Sum(x => x.Сумма)
                                          };
                foreach (var фирма in РазрешенныеФирмы)
                {
                    foreach (var подСклад in ПодСклады)
                    {
                        if (ДанныеРаспределения.Any(x => x.Комиссия && x.ФирмаId == фирма && x.ПодСкладId == подСклад.Id))
                        {
                            var строкиОтчетаККМ = ДанныеРаспределения
                                .Where(x => x.Комиссия && x.ФирмаId == фирма && x.ПодСкладId == подСклад.Id)
                                .Select(x => new ФормаОтчетКкмТЧ
                                {
                                    НоменклатураId = x.НоменклатураId,
                                    ЕдиницаId = x.ЕдиницаId,
                                    Коэффициент = x.Коэффициент,
                                    СтавкаНДС = x.СтавкаНДС,
                                    Цена = x.Цена,
                                    Сумма = x.Сумма,
                                    Количество = x.Количество,
                                    СуммаНДС = doc.УчитыватьНДС ? (x.Сумма * (x.СтавкаНДС.Процент / (100 + (doc.СуммаВклНДС ? x.СтавкаНДС.Процент : 0)))) : 0
                                })
                                .ToList();
                            var докОтчетККМ = await _отчетККМ.ВводНаОснованииAsync(doc, фирма, подСклад.Id, строкиОтчетаККМ);
                            if (докОтчетККМ.Ошибка == null || докОтчетККМ.Ошибка.Skip)
                            {
                                var result = await _отчетККМ.ЗаписатьПровестиAsync(докОтчетККМ, оплатаЧерезЮКассаDoc);
                                if (result != null)
                                {
                                    if (_context.Database.CurrentTransaction != null)
                                        _context.Database.CurrentTransaction.Rollback();
                                    return result;
                                }
                            }
                        }
                        if (ДанныеРаспределения.Any(x => !x.Комиссия && x.ФирмаId == фирма && x.ПодСкладId == подСклад.Id))
                        {
                            var строкиОтчетаККМ = ДанныеРаспределения
                                .Where(x => !x.Комиссия && x.ФирмаId == фирма && x.ПодСкладId == подСклад.Id)
                                .Select(x => new ФормаОтчетКкмТЧ
                                {
                                    НоменклатураId = x.НоменклатураId,
                                    ЕдиницаId = x.ЕдиницаId,
                                    Коэффициент = x.Коэффициент,
                                    СтавкаНДС = x.СтавкаНДС,
                                    Цена = x.Цена,
                                    Сумма = x.Сумма,
                                    Количество = x.Количество,
                                    СуммаНДС = doc.УчитыватьНДС ? (x.Сумма * (x.СтавкаНДС.Процент / (100 + (doc.СуммаВклНДС ? x.СтавкаНДС.Процент : 0)))) : 0
                                })
                                .ToList();
                            var докОтчетККМ = await _отчетККМ.ВводНаОснованииAsync(doc, фирма, подСклад.Id, строкиОтчетаККМ);
                            if (докОтчетККМ.Ошибка == null || докОтчетККМ.Ошибка.Skip)
                            {
                                var result = await _отчетККМ.ЗаписатьПровестиAsync(докОтчетККМ, оплатаЧерезЮКассаDoc);
                                if (result != null)
                                {
                                    if (_context.Database.CurrentTransaction != null)
                                        _context.Database.CurrentTransaction.Rollback();
                                    return result;
                                }
                            }
                        }
                    }
                }
            }
            catch (DbUpdateException db_ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = db_ex.HResult, Description = db_ex.InnerException.ToString() };
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = ex.HResult, Description = ex.Message };
            }
            return null;
        }
        public async Task<ExceptionData> ЗаписатьПровестиAsync(ФормаПродажаКасса doc, ФормаОплатаЧерезЮКасса оплатаЧерезЮКассаDoc)
        {
            ExceptionData result = await ЗаписатьAsync(doc);
            if (result == null)
                result = await ПровестиAsync(doc, оплатаЧерезЮКассаDoc);
            return result;
        }
    }
}
