using Microsoft.EntityFrameworkCore;
using StinClasses.Models;
using StinClasses.Документы;
using StinClasses.Регистры;
using StinClasses.Справочники;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StinClasses.Документы
{
    public class ФормаОтчетКомиссионера
    {
        public ExceptionData Ошибка { get; set; }
        public ОбщиеРеквизиты Общие { get; set; }
        public Контрагент Контрагент { get; set; }
        public Договор Договор { get; set; }
        public bool УчитыватьНДС { get; set; }
        public bool СуммаВклНДС { get; set; }
        public ТипЦен ТипЦен { get; set; }
        public DateTime ДатаОплаты { get; set; }
        public Order Order { get; set; }
        public bool Закрыт { get; set; }
        public List<ФормаОтчетКомиссионераТЧ> ТабличнаяЧасть { get; set; }
        public ФормаОтчетКомиссионера()
        {
            Общие = new ОбщиеРеквизиты();
            ТабличнаяЧасть = new List<ФормаОтчетКомиссионераТЧ>();
        }
    }
    public class ФормаОтчетКомиссионераТЧ
    {
        public Номенклатура Номенклатура { get; set; }
        public decimal Количество { get; set; }
        public Единица Единица { get; set; }
        public decimal Цена { get; set; }
        public decimal Сумма { get; set; }
        public СтавкаНДС СтавкаНДС { get; set; }
        public decimal СуммаНДС { get; set; }
    }
    public interface IОтчетКомиссионера : IДокумент
    {
        Task<ФормаОтчетКомиссионера> ВводНаОснованииAsync(ФормаКомплекснаяПродажа докОснование, DateTime docDateTime);
        Task<ФормаОтчетКомиссионера> ЗаполнитьНаОснованииAsync(ФормаКомплекснаяПродажа докОснование, DateTime docDateTime);
        Task<ExceptionData> ЗаписатьAsync(ФормаОтчетКомиссионера doc);
        Task<ExceptionData> ПровестиAsync(ФормаОтчетКомиссионера doc);
        Task<ExceptionData> ЗаписатьПровестиAsync(ФормаОтчетКомиссионера doc);
    }
    public class ОтчетКомиссионера : Документ, IОтчетКомиссионера
    {
        private IРегистрПартииНаличие _регистрПартииНаличие;
        private IРегистрПартииОтданные _регистрПартииОтданные;
        private IРегистрПродажи _регистрПродажи;
        private IРегистрПрямыеПродажи _регистрПрямыеПродажи;
        private IРегистрПокупатели _регистрПокупатели;
        private IРегистрКнигаПродаж _регистрКнигаПродаж;
        private IРегистрРеализованныйТовар _регистрРеализованныйТовар;
        private IРегистрНакопСкидка _регистрНакопСкидка;
        public ОтчетКомиссионера(StinDbContext context) : base(context)
        {
            _регистрПартииНаличие = new Регистр_ПартииНаличие(context);
            _регистрПартииОтданные = new Регистр_ПартииОтданные(context);
            _регистрПродажи = new Регистр_Продажи(context);
            _регистрПрямыеПродажи = new Регистр_ПрямыеПродажи(context);
            _регистрПокупатели = new Регистр_Покупатели(context);
            _регистрКнигаПродаж = new Регистр_КнигаПродаж(context);
            _регистрРеализованныйТовар = new Регистр_РеализованныйТовар(context);
            _регистрНакопСкидка = new Регистр_НакопСкидка(context);
        }
        protected override void Dispose(bool disposing)
        {
            if (!this.disposed)
            {
                if (disposing)
                {
                    _регистрПартииНаличие.Dispose();
                    _регистрПартииОтданные.Dispose();
                    _регистрПродажи.Dispose();
                    _регистрПрямыеПродажи.Dispose();
                    _регистрПокупатели.Dispose();
                    _регистрКнигаПродаж.Dispose();
                    _регистрРеализованныйТовар.Dispose();
                    _регистрНакопСкидка.Dispose();
                }
            }
            base.Dispose(disposing);
        }
        public async Task<ФормаОтчетКомиссионера> ВводНаОснованииAsync(ФормаКомплекснаяПродажа докОснование, DateTime docDateTime)
        {
            ФормаОтчетКомиссионера doc = new ФормаОтчетКомиссионера();

            doc.Общие.ДокОснование = await ДокОснованиеAsync(докОснование.Общие.IdDoc);
            doc.Общие.Автор = докОснование.Общие.Автор;
            doc.Общие.ВидДокумента10 = (int)ВидДокумента.ОтчетКомиссионера; //1774
            doc.Общие.ВидДокумента36 = Common.Encode36(doc.Общие.ВидДокумента10);
            doc.Общие.Фирма = doc.Общие.ДокОснование.Фирма;

            doc.Общие.ДатаДок = docDateTime <= Common.min1cDate ? DateTime.Now : docDateTime;

            doc.Общие.Комментарий = string.IsNullOrEmpty(докОснование.Общие.Комментарий) ? "" : докОснование.Общие.Комментарий.Trim();

            doc.Контрагент = докОснование.Контрагент;
            doc.Договор = докОснование.Договор;
            doc.ДатаОплаты = докОснование.ДатаОплаты;
            doc.УчитыватьНДС = докОснование.УчитыватьНДС;
            doc.СуммаВклНДС = докОснование.СуммаВклНДС;
            doc.ТипЦен = докОснование.ТипЦен;

            doc.Order = докОснование.Order;
            doc.Закрыт = _контрагент.ПроверкаНаОфКомиссию(doc.Контрагент.Id);

            var docR_ids = await ВыбратьПодчиненныеДокументы(докОснование.Общие.IdDoc, (int)ВидДокумента.Реализация, 1);

            foreach (var docR in docR_ids)
            {
                var формаДокРеализация = await GetФормаРеализацияById(docR);
                foreach (var row in формаДокРеализация.ТабличнаяЧасть)
                    doc.ТабличнаяЧасть.Add(new ФормаОтчетКомиссионераТЧ
                    {
                        Номенклатура = row.Номенклатура,
                        Единица = row.Единица,
                        Количество = row.Количество,
                        Цена = row.Количество == 0 ? 1 : row.Сумма / row.Количество,
                        Сумма = row.Сумма,
                        СтавкаНДС = row.СтавкаНДС,
                        СуммаНДС = row.СуммаНДС,
                    });
            }
            return doc;
        }
        public async Task<ФормаОтчетКомиссионера> ЗаполнитьНаОснованииAsync(ФормаКомплекснаяПродажа докОснование, DateTime docDateTime)
        {
            List<string> СписокФирм = await _фирма.ПолучитьСписокРазрешенныхФирмAsync(докОснование.Общие.Фирма.Id);
            var docR_ids = await ВыбратьПодчиненныеДокументы(докОснование.Общие.IdDoc, (int)ВидДокумента.Реализация, 1);
            List<string> НоменклатураОснованияIds = new List<string>();
            List<ФормаРеализацияТЧ> ТаблицаУслуг = new List<ФормаРеализацияТЧ>();
            foreach (var docR in docR_ids)
            {
                var формаДокРеализация = await GetФормаРеализацияById(docR);
                НоменклатураОснованияIds.AddRange(формаДокРеализация.ТабличнаяЧасть.Select(x => x.Номенклатура.Id));
                ТаблицаУслуг.AddRange(формаДокРеализация.ТабличнаяЧасть.Where(x => x.Номенклатура.ЭтоУслуга));
            }
            var партииОтданные_Остатки = await _регистрПартииОтданные.ПолучитьОстаткиAsync(
               DateTime.Now,
               null,
               false,
               СписокФирм,
               НоменклатураОснованияIds,
               докОснование.Договор.Id,
               докОснование.Общие.ВидДокумента36.PadLeft(4) + докОснование.Общие.IdDoc);

            if (партииОтданные_Остатки?.Count == 0)
                return null;

            var партииОтданныеGrouped = партииОтданные_Остатки.GroupBy(x => x.НоменклатураId).Select(gr => new
            {
                НоменклатураId = gr.Key,
                Количество = gr.Sum(k => k.Количество),
                Стоимость = gr.Sum(s => s.ПродСтоимость)
            });

            ФормаОтчетКомиссионера doc = new ФормаОтчетКомиссионера();

            doc.Общие.ДокОснование = await ДокОснованиеAsync(докОснование.Общие.IdDoc);
            doc.Общие.Автор = await _пользователь.GetUserByIdAsync(Common.UserRobot);
            doc.Общие.ВидДокумента10 = (int)ВидДокумента.ОтчетКомиссионера; //1774
            doc.Общие.ВидДокумента36 = Common.Encode36(doc.Общие.ВидДокумента10);
            doc.Общие.Фирма = doc.Общие.ДокОснование.Фирма;

            doc.Общие.ДатаДок = docDateTime <= Common.min1cDate ? DateTime.Now : docDateTime;

            doc.Общие.Комментарий = string.IsNullOrEmpty(докОснование.Общие.Комментарий) ? "" : докОснование.Общие.Комментарий.Trim();

            doc.Контрагент = докОснование.Контрагент;
            doc.Договор = докОснование.Договор;
            doc.ДатаОплаты = докОснование.ДатаОплаты;
            doc.УчитыватьНДС = докОснование.УчитыватьНДС;
            doc.СуммаВклНДС = докОснование.СуммаВклНДС;
            doc.ТипЦен = докОснование.ТипЦен;

            doc.Order = докОснование.Order;
            doc.Закрыт = _контрагент.ПроверкаНаОфКомиссию(doc.Контрагент.Id);

            var ставкаНдсБезНдс = _номенклатура.GetСтавкаНДС(Common.СтавкиНДС.FirstOrDefault(x => x.Value == "Без НДС").Key);
            foreach (var row in партииОтданныеGrouped)
            {
                var текНоменклатура = await _номенклатура.GetНоменклатураByIdAsync(row.НоменклатураId);
                var текКоличество = row.Количество / текНоменклатура.Единица.Коэффициент;
                var текЦена = текКоличество == 0 ? 1 : row.Стоимость / текКоличество;
                var ставкаНДС = doc.УчитыватьНДС ? await _номенклатура.GetСтавкаНДСAsync(row.НоменклатураId) : ставкаНдсБезНдс;

                doc.ТабличнаяЧасть.Add(new ФормаОтчетКомиссионераТЧ
                {
                    Номенклатура = текНоменклатура,
                    Единица = текНоменклатура.Единица,
                    Количество = текКоличество,
                    Цена = текЦена,
                    Сумма = row.Стоимость,
                    СтавкаНДС = ставкаНДС,
                    СуммаНДС = row.Стоимость * (ставкаНДС.Процент / (100 + ставкаНДС.Процент))
                });
            }
            foreach (var row in ТаблицаУслуг)
                doc.ТабличнаяЧасть.Add(new ФормаОтчетКомиссионераТЧ
                {
                    Номенклатура = row.Номенклатура,
                    Единица = row.Единица,
                    Количество = row.Количество,
                    Цена = row.Количество == 0 ? 1 : row.Сумма / row.Количество,
                    Сумма = row.Сумма,
                    СтавкаНДС = row.СтавкаНДС,
                    СуммаНДС = row.СуммаНДС,
                });
            return doc;
        }
        public async Task<ExceptionData> ЗаписатьAsync(ФормаОтчетКомиссионера doc)
        {
            try
            {
                _1sjourn j = GetEntityJourn(_context, 4588, doc.Общие.ВидДокумента10, Common.НумераторТОРГ12, "ОтчетКомиссионера",
                    null, doc.Общие.ДатаДок,
                    doc.Общие.Фирма.Id,
                    doc.Общие.Автор.Id,
                    "",
                    doc.Контрагент.Наименование);

                doc.Общие.IdDoc = j.Iddoc;
                doc.Общие.DateTimeIdDoc = j.DateTimeIddoc;
                doc.Общие.НомерДок = j.Docno;
                Dh1774 docHeader = new Dh1774
                {
                    Iddoc = j.Iddoc,
                    Sp1755 = doc.Общие.ДокОснование != null ? doc.Общие.ДокОснование.Значение : Common.ПустоеЗначениеИд13,
                    Sp1751 = doc.Контрагент.Id,
                    Sp1752 = doc.Договор.Id,
                    Sp1753 = Common.ВалютаРубль,
                    Sp1754 = 1, //Курс
                    Sp8819 = 0, //ОблагаетсяЕНВД
                    Sp1757 = doc.УчитыватьНДС ? 1 : 0,
                    Sp1758 = doc.СуммаВклНДС ? 1 : 0,
                    Sp1761 = doc.ТипЦен.Id,
                    Sp1760 = doc.ТабличнаяЧасть.Sum(x => x.Сумма), //СуммаВзаиморасчетов
                    Sp3678 = "", //НомерДокВходящий
                    Sp3679 = Common.min1cDate, //ДатаДокВходящий
                    Sp1756 = doc.ДатаОплаты,
                    Sp7815 = 0, //флагСвертки
                    Sp8820 = Common.ПустоеЗначение, //Касса
                    Sp8821 = Common.ПустоеЗначение, //ДвижениеДенежныхС
                    Sp14256 = doc.Закрыт ? 1 : 0, //закрыт
                    Sp1769 = 0, //Сумма
                    Sp1770 = 0, //СуммаНДС
                    Sp660 = string.IsNullOrEmpty(doc.Общие.Комментарий) ? "" : doc.Общие.Комментарий,
                };
                await _context.Dh1774s.AddAsync(docHeader);

                short lineNo = 1;
                foreach (var item in doc.ТабличнаяЧасть)
                {
                    Dt1774 docRow = new Dt1774
                    {
                        Iddoc = j.Iddoc,
                        Lineno = lineNo++,
                        Sp1764 = item.Номенклатура.Id,
                        Sp1765 = item.Количество,
                        Sp1766 = item.Единица.Id,
                        Sp1767 = item.Единица.Коэффициент,
                        Sp1768 = item.Цена,
                        Sp1769 = item.Сумма,
                        Sp1772 = item.СтавкаНДС.Id,
                        Sp1770 = item.СуммаНДС,
                        Sp1771 = Common.ПустоеЗначение, //Партия
                    };
                    await _context.Dt1774s.AddAsync(docRow);
                }

                _context.РегистрацияИзмененийРаспределеннойИБ(doc.Общие.ВидДокумента10, j.Iddoc);
                await _context.SaveChangesAsync();

                await ОбновитьTotals(doc.Общие.ВидДокумента10, j.Iddoc);
                if (doc.Общие.ДокОснование != null)
                    await ОбновитьПодчиненныеДокументы(doc.Общие.ДокОснование.Значение, j.DateTimeIddoc, j.Iddoc);
                //склад
                //await ОбновитьГрафыОтбора(4747, Common.Encode36(55).PadLeft(4) + doc.Склад.Id, j.DateTimeIddoc, j.Iddoc);
                //контрагент
                await ОбновитьГрафыОтбора(862, Common.Encode36(172).PadLeft(4) + doc.Контрагент.Id, j.DateTimeIddoc, j.Iddoc);
            }
            catch (DbUpdateException db_ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = db_ex.HResult, Description = db_ex.InnerException.ToString() };
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = ex.HResult, Description = ex.Message };
            }
            return null;
        }
        private string ВидДолга(string СтатусПартииId)
        {
            string статусName = Common.GetСтатусПартииName(СтатусПартииId);

            if (статусName == "Товар (принятый)")
                return "   5IW   "; //Долг за товара принятые в рознице
            else if (статусName == "Товар (в рознице)")
                return "   4XV   ";  //Долг за товары в рознице
            else if (статусName == "Услуга")
                return "   2VJ   "; //Долг за услуги
            else
                return "    B1   "; //Долг за товары
        }
        public async Task<ExceptionData> ПровестиAsync(ФормаОтчетКомиссионера doc)
        {
            try
            {
                _1sjourn j = await _context._1sjourns.FirstOrDefaultAsync(x => x.Iddoc == doc.Общие.IdDoc);
                if (j == null)
                {
                    if (_context.Database.CurrentTransaction != null)
                        _context.Database.CurrentTransaction.Rollback();
                    return new ExceptionData { Description = "Не обнаружена запись журнала." };
                }
                string message = "";
                int КоличествоДвижений = j.Actcnt;
                List<string> списокТМЦ = doc.ТабличнаяЧасть.Select(x => x.Номенклатура.Id).ToList();
                List<string> СписокФирм = await _фирма.ПолучитьСписокРазрешенныхФирмAsync(doc.Общие.Фирма.Id);
                var партииОтданные_Остатки = await _регистрПартииОтданные.ПолучитьОстаткиAsync(
                   doc.Общие.ДатаДок,
                   doc.Общие.IdDoc,
                   false,
                   СписокФирм,
                   списокТМЦ,
                   doc.Договор.Id,
                   doc.Общие.ДокОснование != null ? doc.Общие.ДокОснование.Значение : "");
                if (партииОтданные_Остатки?.Count == 0)
                {
                    message = "Отсутствуют остатки в Партиях Отданных";
                    if (_context.Database.CurrentTransaction != null)
                        _context.Database.CurrentTransaction.Rollback();
                    return new ExceptionData { Description = message };
                }
                var кодОперацииПродажа = "   16S   ";
                var кодОперацииЗакупка = "    C2   ";
                var кодОперацииОтчетРеализатора = Common.GetКодОперацииId("Отчет реализатора о проданных товарах");
                var РегистрПартииОтданные_Итоги = партииОтданные_Остатки.OrderBy(x => x.ФирмаId);
                var ТаблПартийПеремещения = Enumerable.Repeat(new
                {
                    ФирмаId = "",
                    НоменклатураId = "",
                    Количество = 0.000m,
                    Сумма = 0.00m,
                    СуммаНДС = 0.00m
                }, 0).ToList();
                short lineNo = 0;
                foreach (var строка in doc.ТабличнаяЧасть.Where(x => !x.Номенклатура.ЭтоУслуга))
                {
                    lineNo++;
                    decimal КолВо = строка.Количество * строка.Единица.Коэффициент;
                    var ОстПогСуммаПродРуб = строка.Сумма + ((doc.УчитыватьНДС && !doc.СуммаВклНДС) ? строка.СуммаНДС : 0);
                    var ОстПогНДСПрод = doc.УчитыватьНДС ? строка.СуммаНДС : 0;
                    var МожноОтпустить = КолВо;
                    foreach (var r in РегистрПартииОтданные_Итоги.Where(x => x.НоменклатураId == строка.Номенклатура.Id))
                    {
                        if (МожноОтпустить <= 0)
                            break;
                        string ПоставщикId = Common.ПустоеЗначение;
                        string ДоговорПоставщикаId = Common.ПустоеЗначение;
                        if (r.ПартияId != Common.ПустоеЗначение)
                        {
                            var ДанныеПартии = await _context.Sc214s
                                .Where(x => x.Parentext == r.НоменклатураId && x.Id == r.ПартияId)
                                .Select(x => new { Поставщик = x.Sp436, Договор = x.Sp217 })
                                .FirstOrDefaultAsync();
                            if (ДанныеПартии == null)
                            {
                                ПоставщикId = Common.ПустоеЗначение;
                                ДоговорПоставщикаId = Common.ПустоеЗначение;
                            }
                        }
                        var КоэфСписания = 1m;
                        if (r.Количество > МожноОтпустить)
                            КоэфСписания = МожноОтпустить / r.Количество;
                        decimal кСписанию = Math.Round(r.Количество * КоэфСписания, 5, MidpointRounding.AwayFromZero);
                        decimal СуммаУпр = Math.Round(r.СуммаУпр * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                        decimal СуммаРуб = Math.Round(r.СуммаРуб * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                        decimal СуммаБезНДС = Math.Round(r.СуммаБезНДС * КоэфСписания, 2, MidpointRounding.AwayFromZero);

                        decimal КоэффПогашения = кСписанию / МожноОтпустить;
                        МожноОтпустить = МожноОтпустить - кСписанию;

                        var СписСуммаПродРуб = Math.Round(ОстПогСуммаПродРуб * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                        var СписНДСПрод = Math.Round(ОстПогНДСПрод * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                        var Выручка = Math.Round(СписСуммаПродРуб - СписНДСПрод, 2, MidpointRounding.AwayFromZero);

                        ОстПогСуммаПродРуб = ОстПогСуммаПродРуб - СписСуммаПродРуб;
                        ОстПогНДСПрод = ОстПогНДСПрод - СписНДСПрод;

                        if (r.ФирмаId != doc.Общие.Фирма.Id)
                            ТаблПартийПеремещения.Add(new
                            {
                                ФирмаId = r.ФирмаId,
                                НоменклатураId = строка.Номенклатура.Id,
                                Количество = кСписанию,
                                Сумма = СписСуммаПродРуб,
                                СуммаНДС = СписНДСПрод
                            });

                        КоличествоДвижений++;
                        j.Rf351 = await _регистрПартииОтданные.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                            lineNo, r.ФирмаId, r.ДоговорId, строка.Номенклатура.Id, r.СтатусПартииId, r.ПартияId, r.IdDoc13,
                            кСписанию, СуммаУпр, СуммаРуб, СуммаБезНДС, СписСуммаПродРуб, кодОперацииОтчетРеализатора, Выручка);
                    }
                    if (МожноОтпустить > 0)
                    {
                        var спТоварКупленный = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                        КоличествоДвижений++;
                        j.Rf351 = await _регистрПартииОтданные.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                            lineNo, doc.Общие.Фирма.Id, doc.Договор.Id, строка.Номенклатура.Id, спТоварКупленный, Common.ПустоеЗначение, Common.ПустоеЗначениеИд13,
                            МожноОтпустить, 0, 0, 0, ОстПогСуммаПродРуб, кодОперацииОтчетРеализатора, 0);
                    }
                }
                if (doc.Order != null)
                {
                    foreach (var строка in doc.ТабличнаяЧасть.Where(x => x.Номенклатура.ЭтоУслуга))
                    {
                        lineNo++;
                        var спТоварКупленный = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                        decimal КолВо = строка.Количество * строка.Единица.Коэффициент;
                        var ОстПогСуммаПродРуб = строка.Сумма + ((doc.УчитыватьНДС && !doc.СуммаВклНДС) ? строка.СуммаНДС : 0);
                        КоличествоДвижений++;
                        j.Rf351 = await _регистрПартииОтданные.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                            lineNo, doc.Общие.Фирма.Id, doc.Договор.Id, строка.Номенклатура.Id, спТоварКупленный, Common.ПустоеЗначение, Common.ПустоеЗначениеИд13,
                            КолВо, 0, 0, 0, ОстПогСуммаПродРуб, кодОперацииОтчетРеализатора, 0);
                    }
                }
                //Перемещение
                if (!doc.Закрыт && (ТаблПартийПеремещения.Count > 0)) 
                {
                    var ПеремРегистрПартииНаличие_Остатки = await _регистрПартииНаличие.ПолучитьОстаткиAsync(
                        doc.Общие.ДатаДок,
                        doc.Общие.IdDoc,
                        false,
                        СписокФирм,
                        списокТМЦ,
                        null,
                        null);
                    var ПеремРегистрПартииНаличие_Итоги = ПеремРегистрПартииНаличие_Остатки.OrderBy(x => x.ФирмаId).ThenBy(x => x.ДатаПартии).ThenBy(x => x.DateTimeIdDoc);
                    lineNo = 0;
                    foreach (var строка in ТаблПартийПеремещения)
                    {
                        lineNo++;
                        var ОстПогСуммаПродРуб = строка.Сумма + ((doc.УчитыватьНДС && !doc.СуммаВклНДС) ? строка.СуммаНДС : 0);
                        var ОстПогНДСПрод = doc.УчитыватьНДС ? строка.СуммаНДС : 0;
                        var МожноОтпустить = строка.Количество;
                        foreach (var r in ПеремРегистрПартииНаличие_Итоги.Where(x => (x.ФирмаId == строка.ФирмаId) && (x.НоменклатураId == строка.НоменклатураId)))
                        {
                            if (МожноОтпустить <= 0)
                                break;
                            string ПоставщикId = Common.ПустоеЗначение;
                            string ДоговорПоставщикаId = Common.ПустоеЗначение;
                            if (r.ПартияId != Common.ПустоеЗначение)
                            {
                                var ДанныеПартии = await _context.Sc214s
                                    .Where(x => x.Parentext == r.НоменклатураId && x.Id == r.ПартияId)
                                    .Select(x => new { Поставщик = x.Sp436, Договор = x.Sp217 })
                                    .FirstOrDefaultAsync();
                                if (ДанныеПартии == null)
                                {
                                    ПоставщикId = Common.ПустоеЗначение;
                                    ДоговорПоставщикаId = Common.ПустоеЗначение;
                                }
                                else
                                {
                                    ПоставщикId = ДанныеПартии.Поставщик;
                                    ДоговорПоставщикаId = ДанныеПартии.Договор;
                                }
                            }
                            var КоэфСписания = 1m;
                            if (r.Количество > МожноОтпустить)
                                КоэфСписания = МожноОтпустить / r.Количество;
                            decimal кСписанию = Math.Round(r.Количество * КоэфСписания, 5, MidpointRounding.AwayFromZero);
                            decimal СуммаУпр = Math.Round(r.СуммаУпр * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                            decimal СуммаРуб = Math.Round(r.СуммаРуб * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                            decimal СуммаБезНДС = Math.Round(r.СуммаБезНДС * КоэфСписания, 2, MidpointRounding.AwayFromZero);

                            decimal КоэффПогашения = кСписанию / МожноОтпустить;
                            МожноОтпустить = МожноОтпустить - кСписанию;

                            var СписСуммаПродРуб = Math.Round(ОстПогСуммаПродРуб * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                            var СписНДСПрод = Math.Round(ОстПогНДСПрод * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                            var Выручка = Math.Round(СписСуммаПродРуб - СписНДСПрод, 2, MidpointRounding.AwayFromZero);

                            ОстПогСуммаПродРуб = ОстПогСуммаПродРуб - СписСуммаПродРуб;
                            ОстПогНДСПрод = ОстПогНДСПрод - СписНДСПрод;

                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                lineNo, r.ФирмаId, строка.НоменклатураId, r.СтатусПартииId, r.ПартияId, r.ДатаПартии, r.ЦенаПрод,
                                кСписанию, СуммаУпр, СуммаРуб, СуммаБезНДС, кодОперацииПродажа, СписСуммаПродРуб, Выручка);
                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                                lineNo, doc.Общие.Фирма.Id, строка.НоменклатураId, r.СтатусПартииId, r.ПартияId, r.ДатаПартии, r.ЦенаПрод,
                                кСписанию, СуммаУпр, СуммаРуб, СуммаБезНДС, кодОперацииЗакупка, СписСуммаПродРуб, Выручка);
                        }
                        if (МожноОтпустить > 0)
                        {
                            var спТоварКупленный = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                                lineNo, строка.ФирмаId, строка.НоменклатураId, спТоварКупленный, Common.ПустоеЗначение, Common.min1cDate, 0,
                                МожноОтпустить, 0, 0, 0, кодОперацииПродажа, ОстПогСуммаПродРуб, 0);
                            КоличествоДвижений++;
                            j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                                lineNo, doc.Общие.Фирма.Id, строка.НоменклатураId, спТоварКупленный, Common.ПустоеЗначение, Common.min1cDate, 0,
                                МожноОтпустить, 0, 0, 0, кодОперацииЗакупка, ОстПогСуммаПродРуб, 0);
                        }
                    }
                }
                
                var РегистрПартииНаличие_Остатки = await _регистрПартииНаличие.ПолучитьОстаткиAsync(
                    doc.Общие.ДатаДок,
                    doc.Общие.IdDoc,
                    false,
                    new List<string> { doc.Общие.Фирма.Id },
                    списокТМЦ,
                    null,
                    null
                    );
                var РегистрПартииНаличие_Итоги = РегистрПартииНаличие_Остатки.OrderBy(x => x.ФирмаId).ThenBy(x => x.ДатаПартии).ThenBy(x => x.DateTimeIdDoc);
                var ТаблСписПартий = Enumerable.Repeat(new
                {
                    НомерСтрокиДокумента = (short)0,
                    НоменклатураId = "",
                    Цена = 0.00m,
                    СтатусПартииId = "",
                    ПартияId = "",
                    ДатаПартии = DateTime.MinValue,
                    ЦенаПрод = 0.00m,
                    ПоставщикId = "",
                    ДоговорПоставщикаId = "",
                    СтавкаНДС = "",
                    Количество = 0.000m,
                    СуммаУпр = 0.00m,
                    СуммаБух = 0.00m,
                    СуммаБезНДС = 0.00m,
                    СуммаПрод = 0.00m,
                    СуммаНдсПрод = 0.00m
                }, 0).ToList();
                lineNo = 0;
                foreach (var строка in doc.ТабличнаяЧасть.Where(x => !x.Номенклатура.ЭтоУслуга))
                {
                    lineNo++;
                    decimal МожноОтпустить = строка.Количество * строка.Единица.Коэффициент;
                    var ОстПогСуммаПродРуб = строка.Сумма + ((doc.УчитыватьНДС && !doc.СуммаВклНДС) ? строка.СуммаНДС : 0);
                    var ОстПогНДСПрод = doc.УчитыватьНДС ? строка.СуммаНДС : 0;
                    foreach (var r in РегистрПартииНаличие_Итоги.Where(x => x.НоменклатураId == строка.Номенклатура.Id))
                    {
                        if (МожноОтпустить <= 0)
                            break;
                        string ПоставщикId = Common.ПустоеЗначение;
                        string ДоговорПоставщикаId = Common.ПустоеЗначение;
                        if (r.ПартияId != Common.ПустоеЗначение)
                        {
                            var ДанныеПартии = await _context.Sc214s
                                .Where(x => x.Parentext == r.НоменклатураId && x.Id == r.ПартияId)
                                .Select(x => new { Поставщик = x.Sp436, Договор = x.Sp217 })
                                .FirstOrDefaultAsync();
                            if (ДанныеПартии != null)
                            {
                                ПоставщикId = ДанныеПартии.Поставщик;
                                ДоговорПоставщикаId = ДанныеПартии.Договор;
                            }
                        }
                        var КоэфСписания = 1m;
                        if (r.Количество > МожноОтпустить)
                            КоэфСписания = МожноОтпустить / r.Количество;
                        decimal кСписанию = Math.Round(r.Количество * КоэфСписания, 5, MidpointRounding.AwayFromZero);
                        decimal СуммаУпр = Math.Round(r.СуммаУпр * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                        decimal СуммаРуб = Math.Round(r.СуммаРуб * КоэфСписания, 2, MidpointRounding.AwayFromZero);
                        decimal СуммаБезНДС = Math.Round(r.СуммаБезНДС * КоэфСписания, 2, MidpointRounding.AwayFromZero);

                        decimal КоэффПогашения = кСписанию / МожноОтпустить;
                        МожноОтпустить = МожноОтпустить - кСписанию;

                        var СписСуммаПродРуб = Math.Round(ОстПогСуммаПродРуб * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                        var СписНДСПрод = Math.Round(ОстПогНДСПрод * КоэффПогашения, 2, MidpointRounding.AwayFromZero);
                        var Выручка = Math.Round(СписСуммаПродРуб - СписНДСПрод, 2, MidpointRounding.AwayFromZero);

                        ОстПогСуммаПродРуб = ОстПогСуммаПродРуб - СписСуммаПродРуб;
                        ОстПогНДСПрод = ОстПогНДСПрод - СписНДСПрод;

                        ТаблСписПартий.Add(new
                        {
                            НомерСтрокиДокумента = lineNo,
                            НоменклатураId = строка.Номенклатура.Id,
                            Цена = строка.Цена,
                            СтатусПартииId = r.СтатусПартииId,
                            ПартияId = r.ПартияId,
                            ДатаПартии = r.ДатаПартии,
                            ЦенаПрод = r.ЦенаПрод,
                            ПоставщикId = ПоставщикId,
                            ДоговорПоставщикаId = ДоговорПоставщикаId,
                            СтавкаНДС = строка.СтавкаНДС.Id,
                            Количество = кСписанию,
                            СуммаУпр = СуммаУпр,
                            СуммаБух = СуммаРуб,
                            СуммаБезНДС = СуммаБезНДС,
                            СуммаПрод = СписСуммаПродРуб,
                            СуммаНдсПрод = СписНДСПрод
                        });

                        КоличествоДвижений++;
                        j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                            lineNo, r.ФирмаId, строка.Номенклатура.Id, r.СтатусПартииId, r.ПартияId, r.ДатаПартии, r.ЦенаПрод,
                            кСписанию, СуммаУпр, СуммаРуб, СуммаБезНДС, кодОперацииОтчетРеализатора, СписСуммаПродРуб, Выручка);
                    }
                    if (МожноОтпустить > 0)
                    {
                        var спТоварКупленный = Common.СтатусПартии.Where(x => x.Value == "Товар (купленный)").Select(x => x.Key).FirstOrDefault();
                        ТаблСписПартий.Add(new
                        {
                            НомерСтрокиДокумента = lineNo,
                            НоменклатураId = строка.Номенклатура.Id,
                            Цена = строка.Цена,
                            СтатусПартииId = спТоварКупленный,
                            ПартияId = Common.ПустоеЗначение,
                            ДатаПартии = Common.min1cDate,
                            ЦенаПрод = 0m,
                            ПоставщикId = Common.ПустоеЗначение,
                            ДоговорПоставщикаId = Common.ПустоеЗначение,
                            СтавкаНДС = строка.СтавкаНДС.Id,
                            Количество = МожноОтпустить,
                            СуммаУпр = 0m,
                            СуммаБух = 0m,
                            СуммаБезНДС = 0m,
                            СуммаПрод = ОстПогСуммаПродРуб,
                            СуммаНдсПрод = ОстПогНДСПрод
                        });
                        КоличествоДвижений++;
                        j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                            lineNo, doc.Общие.Фирма.Id, строка.Номенклатура.Id, спТоварКупленный, Common.ПустоеЗначение, Common.min1cDate, 0,
                            МожноОтпустить, 0, 0, 0, кодОперацииОтчетРеализатора, ОстПогСуммаПродРуб, 0);
                    }
                }
                foreach (var строка in doc.ТабличнаяЧасть.Where(x => x.Номенклатура.ЭтоУслуга))
                {
                    lineNo++;
                    var спУслуга = Common.GetСтатусПартииId("Услуга");
                    ТаблСписПартий.Add(new
                    {
                        НомерСтрокиДокумента = lineNo,
                        НоменклатураId = строка.Номенклатура.Id,
                        Цена = строка.Цена,
                        СтатусПартииId = спУслуга,
                        ПартияId = Common.ПустоеЗначение,
                        ДатаПартии = Common.min1cDate,
                        ЦенаПрод = 0m,
                        ПоставщикId = Common.ПустоеЗначение,
                        ДоговорПоставщикаId = Common.ПустоеЗначение,
                        СтавкаНДС = строка.СтавкаНДС.Id,
                        Количество = 1m,
                        СуммаУпр = 0m,
                        СуммаБух = 0m,
                        СуммаБезНДС = 0m,
                        СуммаПрод = строка.Сумма,
                        СуммаНдсПрод = строка.СуммаНДС
                    });
                    КоличествоДвижений++;
                    j.Rf328 = await _регистрПартииНаличие.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, true,
                        lineNo, doc.Общие.Фирма.Id, строка.Номенклатура.Id, спУслуга, Common.ПустоеЗначение, Common.min1cDate, 0,
                        0, 0, 0, 0, кодОперацииОтчетРеализатора, строка.Сумма, строка.Сумма);
                }
                foreach (var r in ТаблСписПартий)
                {
                    КоличествоДвижений++;
                    j.Rf2351 = await _регистрПродажи.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений,
                        doc.Общие.Фирма.Id,
                        doc.Контрагент.Id,
                        r.ПоставщикId,
                        r.НоменклатураId,
                        Common.ПустоеЗначение,
                        r.СуммаУпр,
                        r.СуммаПрод,
                        r.Количество,
                        0, 0, 0,
                        r.СуммаБезНДС,
                        0);
                    КоличествоДвижений++;
                    j.Rf9596 = await _регистрПрямыеПродажи.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений,
                        doc.Общие.Фирма.Id,
                        doc.Контрагент.Id,
                        Common.ПустоеЗначение,
                        r.НоменклатураId,
                        (doc.Контрагент.Менеджер != null ? doc.Контрагент.Менеджер.Id : Common.ПустоеЗначение),
                        кодОперацииОтчетРеализатора,
                        "I", //место продажи
                        Common.ПустоеЗначение,
                        r.СуммаУпр,
                        r.СуммаПрод,
                        r.Количество,
                        0, 0, 0);
                }
                foreach (var r in ТаблСписПартий.Where(x => x.ПартияId != Common.ПустоеЗначение))
                {
                    КоличествоДвижений++;
                    j.Rf438 = await _регистрРеализованныйТовар.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                        doc.Общие.Фирма.Id, r.ДоговорПоставщикаId, r.НоменклатураId, r.ПартияId, doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc,
                        r.Количество, r.СуммаПрод - r.СуммаНдсПрод, 0);
                }

                var GrТаблСписПартий = from t in ТаблСписПартий
                                       group t by new { t.СтатусПартииId, t.СтавкаНДС, t.ДоговорПоставщикаId } into gr
                                       select new
                                       {
                                           СтатусПартииId = gr.Key.СтатусПартииId,
                                           СтавкаНДС = gr.Key.СтавкаНДС,
                                           ДоговорПоставщикаId = gr.Key.ДоговорПоставщикаId,
                                           СуммаПрод = gr.Sum(x => x.СуммаПрод),
                                           НдсПрод = gr.Sum(x => x.СуммаНдсПрод),
                                           СуммаБезНдс = gr.Sum(x => x.СуммаБезНДС)
                                       };
                foreach (var r in GrТаблСписПартий)
                {
                    КоличествоДвижений++;
                    j.Rf4335 = await _регистрПокупатели.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                        doc.Общие.Фирма.Id, doc.Договор.Id, ВидДолга(r.СтатусПартииId), doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc,
                        r.СуммаБезНдс, r.СуммаПрод, кодОперацииОтчетРеализатора, r.ДоговорПоставщикаId, Common.ПустоеЗначениеИд13);

                    КоличествоДвижений++;
                    j.Rf4343 = await _регистрКнигаПродаж.ВыполнитьДвижениеAsync(doc.Общие.IdDoc, doc.Общие.ДатаДок, КоличествоДвижений, false,
                        doc.Общие.ВидДокумента36.PadLeft(4) + doc.Общие.IdDoc,
                        r.СтавкаНДС,
                        r.СтатусПартииId,
                        r.НдсПрод,
                        r.СуммаПрод,
                        кодОперацииОтчетРеализатора,
                        Common.ПустоеЗначениеИд13);
                }

                j.Closed = 1;
                j.Actcnt = КоличествоДвижений;
                j.Ds1946 = 2;

                _context.Update(j);
                _context.РегистрацияИзмененийРаспределеннойИБ(doc.Общие.ВидДокумента10, j.Iddoc);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException db_ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = db_ex.HResult, Description = db_ex.InnerException.ToString() };
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction != null)
                    _context.Database.CurrentTransaction.Rollback();
                return new ExceptionData { Code = ex.HResult, Description = ex.Message };
            }
            return null;
        }
        public async Task<ExceptionData> ЗаписатьПровестиAsync(ФормаОтчетКомиссионера doc)
        {
            var result = await ЗаписатьAsync(doc);
            if (result == null)
                result = await ПровестиAsync(doc);
            return result;
        }
    }
}
